average_sale_price = mean(results$sale_price, na.rm = TRUE),
average_reserve_price = mean(results$reserve_price),
average_highest_bid = mean(results$highest_bid, na.rm = TRUE),
average_optimal_bid = mean(results$optimal_bid, na.rm = TRUE)
)
# Print results
print("Summary of Auction Simulations:")
print(summary_results)
# Plotting the results
library(ggplot2)
# Distribution of reserve prices
ggplot(results, aes(x = reserve_price)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Reserve Prices",
x = "Reserve Price",
y = "Frequency") +
theme_minimal()
# Distribution of highest bids
ggplot(results, aes(x = highest_bid)) +
geom_histogram(binwidth = 5, fill = "green", color = "black", alpha = 0.7) +
labs(title = "Distribution of Highest Bids",
x = "Highest Bid",
y = "Frequency") +
theme_minimal()
# Sale vs. No Sale Analysis
ggplot(results, aes(x = as.factor(sold), fill = as.factor(sold))) +
geom_bar() +
labs(title = "Auction Outcomes: Items Sold vs. Unsold",
x = "Outcome (0 = Unsold, 1 = Sold)",
y = "Count") +
scale_fill_manual(values = c("red", "green"), labels = c("Unsold", "Sold")) +
theme_minimal()
# Optimal Bids Distribution
ggplot(results, aes(x = optimal_bid)) +
geom_histogram(binwidth = 5, fill = "purple", color = "black", alpha = 0.7) +
labs(title = "Distribution of Optimal Bids",
x = "Optimal Bid",
y = "Frequency") +
theme_minimal()
source("~/.active-rstudio-document")
library(doParallel)
detectCores()
?detectCores
detectCores(logical = F)
setwd("~/Documents/GitHub/Copula-estimation-using-loss-based-BART/codes")
# packages
library(VineCopula)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(MASS)   # For multivariate normal functions
library(coda)   # For MCMC diagnostics
library(plot3D)
library(gplots)
library(xtable)
library(patchwork)
library(parallel)
library(mc2d)
library(pracma)
################################################################################
# data generation
################################################################################
set.seed(1e3)
n <- 500
X_obs <- matrix(runif(n), ncol = 1)
# normalise predictors
X_obs.norm <- as.data.frame(apply(X_obs, 2, \(x) (x - min(x))/(max(x) - min(x))))
X_obs.norm <- as.matrix(X_obs.norm)
rownames(X_obs.norm) <- 1:nrow(X_obs)
# tau with tree structure
tau_true_1 <- rep(0,nrow(X_obs))
tau_true_1[X_obs<0.33] <- 0.1
tau_true_1[(X_obs>=0.33)&(X_obs<0.66)] <- 0.7
tau_true_1[(X_obs>=0.66)] <- 0.3
tau_true_1 <- matrix(tau_true_1, ncol = 1)
# periodoic
tau_true_2 <- 0.2*sin(2*pi*X_obs) + 0.5
plot(X_obs, tau_true_1, xlab = "Observations", ylab = "tau")
plot(X_obs, tau_true_2, xlab = "Observations", ylab = "tau")
for (i in 1:2) {
assign(paste0("copula_uu_gauss_",i), BiCopSim(n, family = 1, par = sin(get(paste0("tau_true_",i)) * pi/2)))
}
for (i in 1:2) {
assign(paste0("copula_uu_t_",i), BiCopSim(n, family = 2, par = sin(get(paste0("tau_true_",i)) * pi/2), par2 = 3))
}
for (i in 1:2) {
assign(paste0("copula_uu_gumbel_",i), BiCopSim(n, family = 4, par = 1/(1-get(paste0("tau_true_",i)))))
}
for (i in 1:2) {
assign(paste0("copula_uu_clayton_",i), BiCopSim(n, family = 3, par = (2*get(paste0("tau_true_",i)))/(1-get(paste0("tau_true_",i)))))
}
for (i in 1:2) {
assign(paste0("copula_uu_frank_",i), BiCopSim(n, family = 5, par = BiCopTau2Par(5, get(paste0("tau_true_",i)))))
}
n.chain_par <- 20
n.iter_par <- 6000
n.born.out.par <- 1000
n.thin <- 1
incl.split_par <- TRUE
cont.unif_par <- TRUE
source('MCMC_BART_copula.R')
source('import_functions.R')
moves.prob_par <- c(0.1, 0.4, 0.25, 0.25)
lb.prior.def <- list(fun = joint.prior.new.tree, param = c(1.5618883, 0.6293944))
n.tree <- 1
test_case <- 1
load("gauss_mcmc_1_tree_1_dat.Rdata")
pred_cond <- dat_list$pred
pred_cond_mod = pred_cond %>%
filter(idx > 3000) %>%
group_by(obs, chain, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
pred_cond_mod_avg = pred_cond_mod %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(theta_mean), theta_q975 = mean(theta_q975), theta_q025 = mean(theta_q025))
pl_pred <- ggplot(pred_cond_mod_avg) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
xlab('X') +
ylab('estimated tau') +
theme_classic()
pred_cond_stat = pred_cond_mod_avg %>%
mutate(RMSE = ((theta_true - theta_mean)^2)) %>%
mutate(CI.length = (theta_q975 - theta_q025)) %>%
mutate(CI.cov = ((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
load("gauss_mcmc_1_tree_1_plot.Rdata")
pl_nl<-plot_list$nterm
pl_dp<-plot_list$depth
load("gauss_mcmc_1_tree_1_stat.Rdata")
tree_stat_summary <- stat_list$tree
if((n.tree==1)||(test_case == 1)){
stat_list <- list("pred" = pred_cond_summary, "tree" = tree_stat_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred, "depth" = pl_dp, "nterm" = pl_nl)
} else{
stat_list <- list("pred" = pred_cond_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred)
}
pl_like <- plot_list$like
if((n.tree==1)||(test_case == 1)){
stat_list <- list("pred" = pred_cond_summary, "tree" = tree_stat_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred, "depth" = pl_dp, "nterm" = pl_nl)
} else{
stat_list <- list("pred" = pred_cond_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred)
}
save(stat_list, file = paste0("gauss_mcmc_",test_case,"_tree_",n.tree, "_stat.Rdata"))
save(plot_list, file = paste0("gauss_mcmc_",test_case,"_tree_",n.tree, "_plot.Rdata"))
rm(acc_lb.df, depth_lb.df, like_df, list_pred_lb, model, nt_lb.df, pl_dp, pl_like, pl_nl, pred_cond, pred_cond_mod, pred_cond_stat,
pred_val, pred_cond_summary, tree_stat_summary, pl_pred, plot_list, dat_list,stat_list,pred_cond_mod_avg)
gc()
load("gauss_mcmc_1_tree_1_dat_adapt.Rdata")
pred_cond <- dat_list$pred
pred_cond_mod = pred_cond %>%
filter(idx > 3000) %>%
group_by(obs, chain, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
pred_cond_mod_avg = pred_cond_mod %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(theta_mean), theta_q975 = mean(theta_q975), theta_q025 = mean(theta_q025))
pl_pred <- ggplot(pred_cond_mod_avg) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
xlab('X') +
ylab('estimated tau') +
theme_classic()
pred_cond_stat = pred_cond_mod_avg %>%
mutate(RMSE = ((theta_true - theta_mean)^2)) %>%
mutate(CI.length = (theta_q975 - theta_q025)) %>%
mutate(CI.cov = ((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
pl_pred
load("gauss_mcmc_1_tree_1_plot_adapt.Rdata")
pl_like <- plot_list$like
pl_nl <- plot_list$nterm
pl_dp <- plot_list$depth
load("gauss_mcmc_1_tree_1_stat_adapt.Rdata")
tree_stat_summary <- stat_list$tree
tree_stat_summary
if((n.tree==1)||(test_case == 1)){
stat_list <- list("pred" = pred_cond_summary, "tree" = tree_stat_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred, "depth" = pl_dp, "nterm" = pl_nl)
} else{
stat_list <- list("pred" = pred_cond_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred)
}
save(stat_list, file = paste0("gauss_mcmc_",test_case,"_tree_",n.tree, "_stat_adapt.Rdata"))
save(plot_list, file = paste0("gauss_mcmc_",test_case,"_tree_",n.tree, "_plot_adapt.Rdata"))
rm(acc_lb.df, depth_lb.df, like_df, list_pred_lb, model, nt_lb.df, pl_dp, pl_like, pl_nl, pred_cond, pred_cond_mod, pred_cond_stat,
pred_val, pred_cond_summary, tree_stat_summary, pl_pred, plot_list, dat_list,stat_list,pred_cond_mod_avg)
gc()
load("t_mcmc_1_tree_1_dat.Rdata")
pred_cond <- dat_list$pred
pred_cond_mod = pred_cond %>%
filter(idx > 3000) %>%
group_by(obs, chain, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
pred_cond_mod_avg = pred_cond_mod %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(theta_mean), theta_q975 = mean(theta_q975), theta_q025 = mean(theta_q025))
pl_pred <- ggplot(pred_cond_mod_avg) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
xlab('X') +
ylab('estimated tau') +
theme_classic()
pl_pred
pred_cond_stat = pred_cond_mod_avg %>%
mutate(RMSE = ((theta_true - theta_mean)^2)) %>%
mutate(CI.length = (theta_q975 - theta_q025)) %>%
mutate(CI.cov = ((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
load("t_mcmc_1_tree_1_plot.Rdata")
pl_like <- plot_list$like
pl_nl <- plot_list$nterm
pl_dp <-plot_list$depth
load("t_mcmc_1_tree_1_stat.Rdata")
tree_stat_summary <- stat_list$tree
if((n.tree==1)||(test_case == 1)){
stat_list <- list("pred" = pred_cond_summary, "tree" = tree_stat_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred, "depth" = pl_dp, "nterm" = pl_nl)
} else{
stat_list <- list("pred" = pred_cond_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred)
}
save(stat_list, file = paste0("t_mcmc_",test_case,"_tree_",n.tree, "_stat.Rdata"))
save(plot_list, file = paste0("t_mcmc_",test_case,"_tree_",n.tree, "_plot.Rdata"))
load("t_mcmc_1_tree_1_dat_adapt.Rdata")
rm(acc_lb.df, depth_lb.df, like_df, list_pred_lb, model, nt_lb.df, pl_dp, pl_like, pl_nl, pred_cond, pred_cond_mod, pred_cond_stat,
pred_val, pred_cond_summary, tree_stat_summary, pl_pred, plot_list, dat_list,stat_list,pred_cond_mod_avg)
gc()
load("t_mcmc_1_tree_1_dat_adapt.Rdata")
pred_cond <- dat_list$pred
pred_cond_mod = pred_cond %>%
filter(idx > 3000) %>%
group_by(obs, chain, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
pred_cond_mod_avg = pred_cond_mod %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(theta_mean), theta_q975 = mean(theta_q975), theta_q025 = mean(theta_q025))
pl_pred <- ggplot(pred_cond_mod_avg) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
xlab('X') +
ylab('estimated tau') +
theme_classic()
pred_cond_stat = pred_cond_mod_avg %>%
mutate(RMSE = ((theta_true - theta_mean)^2)) %>%
mutate(CI.length = (theta_q975 - theta_q025)) %>%
mutate(CI.cov = ((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
load("t_mcmc_1_tree_1_plot_adapt.Rdata")
pl_like <- plot_list$like
pl_nl <- plot_list$nterm
pl_dp <- plot_list$depth
load("t_mcmc_1_tree_1_stat_adapt.Rdata")
tree_stat_summary <- stat_list$tree
if((n.tree==1)||(test_case == 1)){
stat_list <- list("pred" = pred_cond_summary, "tree" = tree_stat_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred, "depth" = pl_dp, "nterm" = pl_nl)
} else{
stat_list <- list("pred" = pred_cond_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred)
}
save(stat_list, file = paste0("t_mcmc_",test_case,"_tree_",n.tree, "_stat_adapt.Rdata"))
save(plot_list, file = paste0("t_mcmc_",test_case,"_tree_",n.tree, "_plot_adapt.Rdata"))
rm(acc_lb.df, depth_lb.df, like_df, list_pred_lb, model, nt_lb.df, pl_dp, pl_like, pl_nl, pred_cond, pred_cond_mod, pred_cond_stat,
pred_val, pred_cond_summary, tree_stat_summary, pl_pred, plot_list, dat_list,stat_list,pred_cond_mod_avg)
gc()
load("frank_mcmc_1_tree_1_adapt.Rdata")
rm(frank_mcmc_1_tree_1_adapt)
load("gumbel_mcmc_1_tree_1_dat_adapt.Rdata")
pred_cond <- dat_list$pred
pred_cond_mod = pred_cond %>%
filter(idx > 3000) %>%
group_by(obs, chain, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
pred_cond_mod_avg = pred_cond_mod %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(theta_mean), theta_q975 = mean(theta_q975), theta_q025 = mean(theta_q025))
pl_pred <- ggplot(pred_cond_mod_avg) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
xlab('X') +
ylab('estimated tau') +
theme_classic()
pred_cond_stat = pred_cond_mod_avg %>%
mutate(RMSE = ((theta_true - theta_mean)^2)) %>%
mutate(CI.length = (theta_q975 - theta_q025)) %>%
mutate(CI.cov = ((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
pl_pred
pred_cond_mod = pred_cond %>%
filter(idx > 3000) %>%
group_by(obs, chain, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025)) %>%
mutate(theta_cov = ((theta_true < theta_q975) & (theta_true > theta_q025)))
pred_cond_mod_avg = pred_cond_mod %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(theta_mean), theta_q975 = mean(theta_q975), theta_q025 = mean(theta_q025), theta_cov = mean(theta_cov))
View(pred_cond_mod_avg)
pred_cond_stat = pred_cond_mod_avg %>%
mutate(RMSE = ((theta_true - theta_mean)^2)) %>%
mutate(CI.length = (theta_q975 - theta_q025)) %>%
mutate(CI.cov = theta_cov) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
View(pred_cond_mod)
# tau with tree structure
tau_true_1_true <- rep(0,nrow(X_obs))
tau_true_1_true[X_obs<0.33] <- 0.2
tau_true_1_true[(X_obs>=0.33)&(X_obs<0.66)] <- 0.7
tau_true_1_true[(X_obs>=0.66)] <- 0.3
tau_true_1 <- matrix(tau_true_1_true, ncol = 1) + rnorm(n, sd = 0.05)
# periodoic
tau_true_2_true <- 0.2*sin(2*pi*X_obs) + 0.5
tau_true_2 <- tau_true_2_true + rnorm(n, sd = 0.05)
plot(X_obs, tau_true_1, xlab = "Observations", ylab = "tau")
plot(X_obs, tau_true_2, xlab = "Observations", ylab = "tau")
50*500*2000
20*3000*500
source("C:/Users/ntb148/Documents/Github/Copula-estimation-using-loss-based-BART/codes/ex_1_post_process.R")
load("gauss_gdp_LT_post_adapt.Rdata")
load("t_gdp_LT_post_adapt.Rdata")
load("clayton_gdp_LT_post_adapt.Rdata")
load("gumbel_gdp_LT_post_adapt.Rdata")
load("frank_gdp_LT_post_adapt.Rdata")
# data plotting
pred_cond <- data.frame("obs" = rep(GDP, each = (n.chain_par * (n.iter_par - n.born.out.par))))
pred_cond$gauss_y = link_gauss(gauss_pred_val_vec)
pred_cond$gauss_tau = BiCopPar2Tau(1, pred_cond$gauss_y)
pred_cond$t_y = link_t(t_pred_val_vec)
pred_cond$t_tau = BiCopPar2Tau(2, pred_cond$t_y)
pred_cond$clayton_y = link_clayton(clayton_pred_val_vec)
pred_cond$clayton_tau = BiCopPar2Tau(3, pred_cond$clayton_y)
pred_cond$gumbel_y = link_gumbel(gumbel_pred_val_vec)
pred_cond$gumbel_tau = BiCopPar2Tau(4, pred_cond$gumbel_y)
pred_cond$frank_y = link_frank(frank_pred_val_vec)
pred_cond$frank_tau = BiCopPar2Tau(5, pred_cond$frank_y)
gauss_pl_like
t_pl_like
clayton_pl_like_pl_like
clayton_pl_like
gumbel_pl_like
frank_pl_like
pred_cond_thin = na.omit(pred_cond[c(rep(NA,(n.thin-1)), TRUE),])
pred_cond_mod = pred_cond_thin %>%
group_by(obs) %>%
summarise(gauss_theta_mean = mean(gauss_y), gauss_theta_q975 = quantile(gauss_y, .975), gauss_theta_q025 = quantile(gauss_y, .025),
frank_theta_mean = mean(frank_y), frank_theta_q975 = quantile(frank_y, .975), frank_theta_q025 = quantile(frank_y, .025),
t_theta_mean = mean(t_y), t_theta_q975 = quantile(t_y, .975), t_theta_q025 = quantile(t_y, .025),
clayton_theta_mean = mean(clayton_y), clayton_theta_q975 = quantile(clayton_y, .975), clayton_theta_q025 = quantile(clayton_y, .025),
gumbel_theta_mean = mean(gumbel_y), gumbel_theta_q975 = quantile(gumbel_y, .975), gumbel_theta_q025 = quantile(gumbel_y, .025))
pred_cond_mod_tau = pred_cond_thin %>%
group_by(obs) %>%
summarise(gauss_tau_mean = mean(gauss_tau), gauss_tau_q975 = quantile(gauss_tau, .975), gauss_tau_q025 = quantile(gauss_tau, .025),
frank_tau_mean = mean(frank_tau), frank_tau_q975 = quantile(frank_tau, .975), frank_tau_q025 = quantile(frank_tau, .025),
t_tau_mean = mean(t_tau), t_tau_q975 = quantile(t_tau, .975), t_tau_q025 = quantile(t_tau, .025),
clayton_tau_mean = mean(clayton_tau), clayton_tau_q975 = quantile(clayton_tau, .975), clayton_tau_q025 = quantile(clayton_tau, .025),
gumbel_tau_mean = mean(gumbel_tau), gumbel_tau_q975 = quantile(gumbel_tau, .975), gumbel_tau_q025 = quantile(gumbel_tau, .025))
pl_tau_est <- ggplot(pred_cond_mod_tau) +
geom_line(aes(obs, gauss_tau_mean, col = "gauss")) +
geom_line(aes(obs, gauss_tau_q975, col = "gauss"),linetype="dotted") +
geom_line(aes(obs, gauss_tau_q025, col = "gauss"),linetype="dotted") +
geom_line(aes(obs, t_tau_mean, col = "t")) +
geom_line(aes(obs, t_tau_q975, col = "t"),linetype="dotted") +
geom_line(aes(obs, t_tau_q025, col = "t"),linetype="dotted") +
geom_line(aes(obs, clayton_tau_mean, col = "clayton")) +
geom_line(aes(obs, clayton_tau_q975, col = "clayton"),linetype="dotted") +
geom_line(aes(obs, clayton_tau_q025, col = "clayton"),linetype="dotted") +
geom_line(aes(obs, gumbel_tau_mean, col = "gumbel")) +
geom_line(aes(obs, gumbel_tau_q975, col = "gumbel"),linetype="dotted") +
geom_line(aes(obs, gumbel_tau_q025, col = "gumbel"),linetype="dotted") +
geom_line(aes(obs, frank_tau_mean, col = "frank")) +
geom_line(aes(obs, frank_tau_q975, col = "frank"),linetype="dotted") +
geom_line(aes(obs, frank_tau_q025, col = "frank"),linetype="dotted") +
xlab('X') +
ylab('estimated tau') +
theme_classic()
pl_tau_est
save(pred_cond, pred_cond_mod_tau, pl_tau_est, file = "pred_tau_LE.Rdata")
cor(U1_LE,U2_LE, method = "kendall")
plot(U1_LE,U2_LE)
plot(gauss_pred_U1_LE,gauss_pred_U2_LE)
cor(U1_LT,U2_LT, method = "kendall")
plot(U1_LT,U2_LT)
plot(gauss_pred_U1_LT,gauss_pred_U2_LT)
plot(U1_LT,U2_LT)
plot(t_pred_U1_LT,t_pred_U2_LT)
plot(U1_LT,U2_LT)
plot(clayton_pred_U1_LT,clayton_pred_U2_LT)
plot(U1_LT,U2_LT)
plot(gumbel_pred_U1_LT,gumbel_pred_U2_LT)
plot(U1_LT,U2_LT)
plot(frank_pred_U1_LT,frank_pred_U2_LT)
hist_true <- hist2d(U1_LT, U2_LT, nbins = c(10,10), show = FALSE)
par(mar = c(1,1,1,1), mfrow = c(3,2))
hist3D(
x = hist_true$x,
y = hist_true$y,
z = hist_true$counts,
colvar = NULL,  # disables color mapping
col = "lightblue",  # solid monochrome color
border = "grey",
theta = -45, scale = FALSE, expand = 0.02, bty = "g", phi = 30,    # shading gives 3D effect
lighting = TRUE,
ltheta = 120, ticktype = "detailed",
xlab = "", ylab = "", zlab = "",
main = "Observed copula"
)
hist3D(
x = hist_gauss$x,
y = hist_gauss$y,
z = hist_gauss$counts,
colvar = NULL,  # disables color mapping
col = "lightblue",  # solid monochrome color
border = "grey",
theta = -45, scale = FALSE, expand = 0.02, bty = "g", phi = 30,    # shading gives 3D effect
lighting = TRUE,
ltheta = 120, ticktype = "detailed",
xlab = "", ylab = "", zlab = "",
main = "Gauss"
)
hist3D(
x = hist_t$x,
y = hist_t$y,
z = hist_t$counts,
colvar = NULL,  # disables color mapping
col = "lightblue",  # solid monochrome color
border = "grey",
theta = -45, scale = FALSE, expand = 0.02, bty = "g", phi = 30,    # shading gives 3D effect
lighting = TRUE,
ltheta = 120, ticktype = "detailed",
xlab = "", ylab = "", zlab = "",
main = "student t"
)
hist3D(
x = hist_clayton$x,
y = hist_clayton$y,
z = hist_clayton$counts,
colvar = NULL,  # disables color mapping
col = "lightblue",  # solid monochrome color
border = "grey",
theta = -45, scale = FALSE, expand = 0.02, bty = "g", phi = 30,    # shading gives 3D effect
lighting = TRUE,
ltheta = 120, ticktype = "detailed",
xlab = "", ylab = "", zlab = "",
main = "Clayton"
)
hist3D(
x = hist_gumbel$x,
y = hist_gumbel$y,
z = hist_gumbel$counts,
colvar = NULL,  # disables color mapping
col = "lightblue",  # solid monochrome color
border = "grey",
theta = -45, scale = FALSE, expand = 0.02, bty = "g", phi = 30,    # shading gives 3D effect
lighting = TRUE,
ltheta = 120, ticktype = "detailed",
xlab = "", ylab = "", zlab = "",
main = "gumbel"
)
hist3D(
x = hist_frank$x,
y = hist_frank$y,
z = hist_frank$counts,
colvar = NULL,  # disables color mapping
col = "lightblue",  # solid monochrome color
border = "grey",
theta = -45, scale = FALSE, expand = 0.02, bty = "g", phi = 30,    # shading gives 3D effect
lighting = TRUE,
ltheta = 120, ticktype = "detailed",
xlab = "", ylab = "", zlab = "",
main = "Frank"
)
library(cramer)
cramer.test(cbind(U1_LT,U2_LT), cbind(U1_LT,U2_LT))
cramer.test(cbind(U1_LT,U2_LT), cbind(t_pred_U1_LT, t_pred_U2_LT), replicates = 10000, sim = "permutation")
cramer.test(cbind(U1_LT,U2_LT), cbind(gauss_pred_U1_LT, gauss_pred_U2_LT), replicates = 10000)
cramer.test(cbind(U1_LT,U2_LT), cbind(frank_pred_U1_LT, frank_pred_U2_LT), replicates = 10000)
cramer.test(cbind(U1_LT,U2_LT), cbind(clayton_pred_U1_LT, clayton_pred_U2_LT), replicates = 10000)
cramer.test(cbind(U1_LT,U2_LT), cbind(gumbel_pred_U1_LT, gumbel_pred_U2_LT), replicates = 10000)
library(fasano.franceschini.test)
fasano.franceschini.test(cbind(U1_LT,U2_LT), cbind(U1_LT,U2_LT))
fasano.franceschini.test(cbind(U1_LT,U2_LT), cbind(t_pred_U1_LT, t_pred_U2_LT))
fasano.franceschini.test(cbind(U1_LT,U2_LT), cbind(gauss_pred_U1_LT, gauss_pred_U2_LT))
fasano.franceschini.test(cbind(U1_LT,U2_LT), cbind(frank_pred_U1_LT, frank_pred_U2_LT))
fasano.franceschini.test(cbind(U1_LT,U2_LT), cbind(clayton_pred_U1_LT, clayton_pred_U2_LT))
fasano.franceschini.test(cbind(U1_LT,U2_LT), cbind(gumbel_pred_U1_LT, gumbel_pred_U2_LT))
library(ks)
kde.test(cbind(U1_LT,U2_LT), cbind(U1_LT,U2_LT))
kde.test(cbind(U1_LT,U2_LT), cbind(t_pred_U1_LT, t_pred_U2_LT))
kde.test(cbind(U1_LT,U2_LT), cbind(gauss_pred_U1_LT, gauss_pred_U2_LT))
kde.test(cbind(U1_LT,U2_LT), cbind(frank_pred_U1_LT, frank_pred_U2_LT))
kde.test(cbind(U1_LT,U2_LT), cbind(clayton_pred_U1_LT, clayton_pred_U2_LT))
kde.test(cbind(U1_LT,U2_LT), cbind(gumbel_pred_U1_LT, gumbel_pred_U2_LT))
gauss_pl_like
