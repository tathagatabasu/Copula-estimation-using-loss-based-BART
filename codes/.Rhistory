prior_list = lb.prior.def,
moves.prob = moves.prob_par,
starting.tree = NULL,
cont.unif = cont.unif_par,
include.split = incl.split_par,
prop_mu = 0, prop_sigma = 1,
theta_param_1 = 0, theta_param_2 = 1,
prior_type = "N",
cop_type = "gauss"))
cat('done case', i, '\n')
}
for (i in 3) {
assign(paste0("gauss_mcmc_lb.def_single_",i), MCMC_copula(n.iter = n.iter_par, n.burn = 1000,
n.tree = 5,
X = X_obs.norm,
U1 = get(paste0("copula_uu_gauss_",i))[,1],
U2 = get(paste0("copula_uu_gauss_",i))[,2],
prior_list = lb.prior.def,
moves.prob = moves.prob_par,
starting.tree = NULL,
cont.unif = cont.unif_par,
include.split = incl.split_par,
prop_mu = 0, prop_sigma = 1,
theta_param_1 = 0, theta_param_2 = 1,
prior_type = "N",
cop_type = "gauss"))
cat('done case', i, '\n')
}
test_case = 3
model <- get(paste0("gauss_mcmc_lb.def_single_",test_case))
list_pred_lb <- lapply(1:length(model$trees), \(idx) BART_calculate_pred(model$trees[[idx]], X_obs_pred.norm))
pred_val = do.call(rbind,list_pred_lb)
n.thin <- 1
pred_val_vec = as.vector(pred_val[(1:(n.chain_par * n.iter_par))[rep((n.born.out.par+1):n.iter_par, n.chain_par) + rep(n.iter_par * (0:(n.chain_par-1)), each = (n.iter_par - n.born.out.par))],])
pred_obs = rep(X_obs_pred.norm, each = (n.chain_par * (n.iter_par - n.born.out.par)))
theta_true = rep(param_gauss(get(paste0("tau_true_pred_",test_case))), each = (n.chain_par * (n.iter_par - n.born.out.par)))
pred_cond <- data.frame("obs" = pred_obs)
pred_cond$obs = pred_obs
pred_cond$theta_true = theta_true
pred_cond$y = link_gauss(pred_val_vec)
pred_cond_thin = na.omit(pred_cond[c(rep(NA,(n.thin-1)), TRUE),])
pred_cond_mod = pred_cond_thin %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
ggplot(pred_cond_mod) +
geom_line(aes(obs, theta_mean)) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
# facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('X') +
ylab('estimated rho') +
theme_classic()
pred_cond_stat = pred_cond_mod %>%
mutate(RMSE = mean((theta_true - theta_mean)^2)) %>%
mutate(CI.length = mean(theta_q975 - theta_q025)) %>%
mutate(CI.cov = mean((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
for (i in 3) {
assign(paste0("gauss_mcmc_lb.def_single_",i), MCMC_copula(n.iter = n.iter_par, n.burn = 1000,
n.tree = 10,
X = X_obs.norm,
U1 = get(paste0("copula_uu_gauss_",i))[,1],
U2 = get(paste0("copula_uu_gauss_",i))[,2],
prior_list = lb.prior.def,
moves.prob = moves.prob_par,
starting.tree = NULL,
cont.unif = cont.unif_par,
include.split = incl.split_par,
prop_mu = 0, prop_sigma = 1,
theta_param_1 = 0, theta_param_2 = 1,
prior_type = "N",
cop_type = "gauss"))
cat('done case', i, '\n')
}
model <- get(paste0("gauss_mcmc_lb.def_single_",test_case))
list_pred_lb <- lapply(1:length(model$trees), \(idx) BART_calculate_pred(model$trees[[idx]], X_obs_pred.norm))
pred_val = do.call(rbind,list_pred_lb)
n.thin <- 1
pred_val_vec = as.vector(pred_val[(1:(n.chain_par * n.iter_par))[rep((n.born.out.par+1):n.iter_par, n.chain_par) + rep(n.iter_par * (0:(n.chain_par-1)), each = (n.iter_par - n.born.out.par))],])
pred_obs = rep(X_obs_pred.norm, each = (n.chain_par * (n.iter_par - n.born.out.par)))
theta_true = rep(param_gauss(get(paste0("tau_true_pred_",test_case))), each = (n.chain_par * (n.iter_par - n.born.out.par)))
pred_cond <- data.frame("obs" = pred_obs)
pred_cond$obs = pred_obs
pred_cond$theta_true = theta_true
pred_cond$y = link_gauss(pred_val_vec)
pred_cond_thin = na.omit(pred_cond[c(rep(NA,(n.thin-1)), TRUE),])
pred_cond_mod = pred_cond_thin %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
ggplot(pred_cond_mod) +
geom_line(aes(obs, theta_mean)) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
# facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('X') +
ylab('estimated rho') +
theme_classic()
pred_cond_stat = pred_cond_mod %>%
mutate(RMSE = mean((theta_true - theta_mean)^2)) %>%
mutate(CI.length = mean(theta_q975 - theta_q025)) %>%
mutate(CI.cov = mean((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
like_val <- apply(pred_val, 1, function(x)loglik_gauss(link_gauss(x), get(paste0("copula_uu_gauss_",i))[,1], get(paste0("copula_uu_gauss_",i))[,2]))
like_df <-data.frame("nn" = like_val)
like_df$idx <- 1:(n.chain_par*n.iter_par)
pl_like <- ggplot(like_df, aes(idx, nn)) +
geom_line() +
ylab('log-likelihood') +
theme_classic() +
theme(panel.grid.major = element_line())
pl_like
for (i in 3) {
assign(paste0("t_mcmc_lb.def_single_",i), MCMC_copula(n.iter = n.iter_par, n.burn = 1000,
n.tree = 5,
X = X_obs.norm,
U1 = get(paste0("copula_uu_t_",i))[,1],
U2 = get(paste0("copula_uu_t_",i))[,2],
prior_list = lb.prior.def,
moves.prob = moves.prob_par,
starting.tree = NULL,
cont.unif = cont.unif_par,
include.split = incl.split_par,
prop_mu = 0, prop_sigma = .2,
theta_param_1 = 0, theta_param_2 = 1,
prior_type = "N",
cop_type = "t"))
cat('done case', i, '\n')
}
test_case = 3
model <- get(paste0("t_mcmc_lb.def_single_",test_case))
list_pred_lb <- lapply(1:length(model$trees), \(idx) BART_calculate_pred(model$trees[[idx]], X_obs_pred.norm))
pred_val = do.call(rbind,list_pred_lb)
n.thin <- 1
pred_val_vec = as.vector(pred_val[(1:(n.chain_par * n.iter_par))[rep((n.born.out.par+1):n.iter_par, n.chain_par) + rep(n.iter_par * (0:(n.chain_par-1)), each = (n.iter_par - n.born.out.par))],])
pred_obs = rep(X_obs_pred.norm, each = (n.chain_par * (n.iter_par - n.born.out.par)))
theta_true = rep(param_t(get(paste0("tau_true_pred_",test_case))), each = (n.chain_par * (n.iter_par - n.born.out.par)))
pred_cond <- data.frame("obs" = pred_obs)
pred_cond$obs = pred_obs
pred_cond$theta_true = theta_true
pred_cond$y = link_t(pred_val_vec)
pred_cond_thin = na.omit(pred_cond[c(rep(NA,(n.thin-1)), TRUE),])
pred_cond_mod = pred_cond_thin %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
ggplot(pred_cond_mod) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
# facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('X') +
ylab('estimated rho') +
theme_classic()
pred_cond_stat = pred_cond_mod %>%
mutate(RMSE = mean((theta_true - theta_mean)^2)) %>%
mutate(CI.length = mean(theta_q975 - theta_q025)) %>%
mutate(CI.cov = mean((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
like_val <- apply(pred_val, 1, function(x)loglik_t(link_t(x), get(paste0("copula_uu_t_",i))[,1], get(paste0("copula_uu_t_",i))[,2]))
like_df <-data.frame("nn" = like_val)
like_df$idx <- 1:(n.chain_par*n.iter_par)
pl_like <- ggplot(like_df, aes(idx, nn)) +
geom_line() +
ylab('log-likelihood') +
theme_classic() +
theme(panel.grid.major = element_line())
pl_like
for (i in 2) {
assign(paste0("clayton_mcmc_lb.def_single_",i), MCMC_copula(n.iter = 2000, n.burn = 1000,
n.tree = 5, #n.cores = 10,
X = X_obs.norm,
U1 = get(paste0("copula_uu_clayton_",i))[,1],
U2 = get(paste0("copula_uu_clayton_",i))[,2],
prior_list = lb.prior.def,
moves.prob = moves.prob_par,
starting.tree = NULL,
cont.unif = cont.unif_par,
include.split = incl.split_par,
prop_mu = 0, prop_sigma = .2,
theta_param_1 = 0, theta_param_2 = 1,
prior_type = "N",
cop_type = "clayton"))
cat('done case', i, '\n')
}
test_case = 2
model <- get(paste0("clayton_mcmc_lb.def_single_",test_case))
list_pred_lb <- lapply(1:length(model$trees), \(idx) BART_calculate_pred(model$trees[[idx]], X_obs_pred.norm))
pred_val = do.call(rbind,list_pred_lb)
n.thin <- 1
n.iter_par <- 2000
n.born.out.par <-1000
pred_val_vec = as.vector(pred_val[(1:(n.chain_par * n.iter_par))[rep((n.born.out.par+1):n.iter_par, n.chain_par) + rep(n.iter_par * (0:(n.chain_par-1)), each = (n.iter_par - n.born.out.par))],])
pred_obs = rep(X_obs_pred.norm, each = (n.chain_par * (n.iter_par - n.born.out.par)))
theta_true = rep(param_clayton(get(paste0("tau_true_pred_",test_case))), each = (n.chain_par * (n.iter_par - n.born.out.par)))
pred_cond <- data.frame("obs" = pred_obs)
pred_cond$obs = pred_obs
pred_cond$theta_true = theta_true
pred_cond$y = link_clayton(pred_val_vec)
pred_cond_thin = na.omit(pred_cond[c(rep(NA,(n.thin-1)), TRUE),])
pred_cond_mod = pred_cond_thin %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
ggplot(pred_cond_mod) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
# facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('X') +
ylab('estimated rho') +
theme_classic()
pred_cond_stat = pred_cond_mod %>%
mutate(RMSE = mean((theta_true - theta_mean)^2)) %>%
mutate(CI.length = mean(theta_q975 - theta_q025)) %>%
mutate(CI.cov = mean((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
for (i in 2) {
assign(paste0("clayton_mcmc_lb.def_single_",i), MCMC_copula(n.iter = 2000, n.burn = 1000,
n.tree = 20, #n.cores = 10,
X = X_obs.norm,
U1 = get(paste0("copula_uu_clayton_",i))[,1],
U2 = get(paste0("copula_uu_clayton_",i))[,2],
prior_list = lb.prior.def,
moves.prob = moves.prob_par,
starting.tree = NULL,
cont.unif = cont.unif_par,
include.split = incl.split_par,
prop_mu = 0, prop_sigma = .2,
theta_param_1 = 0, theta_param_2 = 1,
prior_type = "N",
cop_type = "clayton"))
cat('done case', i, '\n')
}
model <- get(paste0("clayton_mcmc_lb.def_single_",test_case))
list_pred_lb <- lapply(1:length(model$trees), \(idx) BART_calculate_pred(model$trees[[idx]], X_obs_pred.norm))
pred_val = do.call(rbind,list_pred_lb)
n.thin <- 1
n.iter_par <- 2000
n.born.out.par <-1000
pred_val_vec = as.vector(pred_val[(1:(n.chain_par * n.iter_par))[rep((n.born.out.par+1):n.iter_par, n.chain_par) + rep(n.iter_par * (0:(n.chain_par-1)), each = (n.iter_par - n.born.out.par))],])
pred_obs = rep(X_obs_pred.norm, each = (n.chain_par * (n.iter_par - n.born.out.par)))
theta_true = rep(param_clayton(get(paste0("tau_true_pred_",test_case))), each = (n.chain_par * (n.iter_par - n.born.out.par)))
pred_cond <- data.frame("obs" = pred_obs)
pred_cond$obs = pred_obs
pred_cond$theta_true = theta_true
pred_cond$y = link_clayton(pred_val_vec)
pred_cond_thin = na.omit(pred_cond[c(rep(NA,(n.thin-1)), TRUE),])
pred_cond_mod = pred_cond_thin %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
ggplot(pred_cond_mod) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
# facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('X') +
ylab('estimated rho') +
theme_classic()
pred_cond_stat = pred_cond_mod %>%
mutate(RMSE = mean((theta_true - theta_mean)^2)) %>%
mutate(CI.length = mean(theta_q975 - theta_q025)) %>%
mutate(CI.cov = mean((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
check_dat <- read.csv("countries.csv")
View(check_dat)
colnames(check_dat)
library(dplyr)
colnames_for_anlysis <- c("Country","People.and.Society..Life.expectancy.at.birth...male",
"People.and.Society..Life.expectancy.at.birth...female","People.and.Society..Obesity...adult.prevalence.rate",
"People.and.Society..Education.expenditures","People.and.Society..Literacy...male",
"People.and.Society..Literacy...female","People.and.Society..School.life.expectancy..primary.to.tertiary.education....male",
"People.and.Society..School.life.expectancy..primary.to.tertiary.education....female",
"Economy..Real.GDP..purchasing.power.parity.", "Economy..Real.GDP.growth.rate",
"Economy..Real.GDP.per.capita", "Economy..Inflation.rate..consumer.prices.")
check_dat %>% select(colnames_for_anlysis)
check_dat_red <- check_dat %>% select(all_of(colnames_for_anlysis))
View(check_dat_red)
View(check_dat_red)
check_dat_red$Economy..Real.GDP..purchasing.power.parity.
library(readr)
extract_numeric(check_dat_red$Economy..Real.GDP.growth.rate)
parse_number(check_dat_red$Economy..Real.GDP.growth.rate)
View(check_dat_red)
grepl("(2023 est.)", check_dat_red$Economy..Real.GDP..purchasing.power.parity.)
sum(grepl("(2023 est.)", check_dat_red$Economy..Real.GDP..purchasing.power.parity.))
index_2023 <- sum(grepl("(2023 est.)", check_dat_red$Economy..Real.GDP..purchasing.power.parity.))
check_dat_2023 <- check_dat_red[index_2023,]
index_2023 <- (grepl("(2023 est.)", check_dat_red$Economy..Real.GDP..purchasing.power.parity.))
check_dat_2023 <- check_dat_red[index_2023,]
View(check_dat_2023)
check_dat <- read.csv("countries.csv")
colnames_for_anlysis <- c("Country","People.and.Society..Life.expectancy.at.birth...male",
"People.and.Society..Life.expectancy.at.birth...female",
"People.and.Society..Education.expenditures","People.and.Society..Literacy...male",
"People.and.Society..Literacy...female","People.and.Society..School.life.expectancy..primary.to.tertiary.education....male",
"People.and.Society..School.life.expectancy..primary.to.tertiary.education....female",
"Economy..Real.GDP..purchasing.power.parity.", "Economy..Real.GDP.growth.rate",
"Economy..Real.GDP.per.capita", "Economy..Inflation.rate..consumer.prices.")
check_dat_red <- check_dat %>% select(all_of(colnames_for_anlysis))
index_2023 <- (grepl("(2023 est.)", check_dat_red$Economy..Real.GDP..purchasing.power.parity.))
check_dat_2023 <- check_dat_red[index_2023,]
colnames(check_dat_2023) <- c("Country",
"Life_expectancy_M",
"Life_expectancy_F",
"Edu_expense",
"Literacy_M",
"Literacy_F",
"School_education_M",
"School_education_F",
"GDP_PPP",
"GDP_growth",
"GDP_per_capita",
"Inflation_rate")
View(check_dat_2023)
check_dat_2023 = check_dat_2023 %>%
mutate(across(.fns = parse_number))
View(check_dat_2023)
index_bil <- (grepl("billion", check_dat_red$Economy..Real.GDP..purchasing.power.parity.))
index_tril <- (grepl("trillion", check_dat_red$Economy..Real.GDP..purchasing.power.parity.))
index_mil <- (grepl("million", check_dat_red$Economy..Real.GDP..purchasing.power.parity.))
sum(index_bil)+sum(index_mil)+sum(index_tril)
index_bil <- (grepl("billion", check_dat_2023$GDP_PPP))
index_tril <- (grepl("trillion", check_dat_2023$GDP_PPP))
index_mil <- (grepl("million", check_dat_2023$GDP_PPP))
sum(index_bil)+sum(index_mil)+sum(index_tril)
check_dat_2023 <- check_dat_red[index_2023,]
colnames(check_dat_2023) <- c("Country",
"Life_expectancy_M",
"Life_expectancy_F",
"Edu_expense",
"Literacy_M",
"Literacy_F",
"School_education_M",
"School_education_F",
"GDP_PPP",
"GDP_growth",
"GDP_per_capita",
"Inflation_rate")
index_bil <- (grepl("billion", check_dat_2023$GDP_PPP))
index_tril <- (grepl("trillion", check_dat_2023$GDP_PPP))
index_mil <- (grepl("million", check_dat_2023$GDP_PPP))
sum(index_bil)+sum(index_mil)+sum(index_tril)
index_bil == index_mil
index_bil <- (grepl("billion (2023 est.)", check_dat_2023$GDP_PPP))
index_tril <- (grepl("trillion (2023 est.)", check_dat_2023$GDP_PPP))
index_mil <- (grepl("million (2023 est.)", check_dat_2023$GDP_PPP))
sum(index_bil)+sum(index_mil)+sum(index_tril)
check_dat <- read.csv("countries.csv")
colnames_for_anlysis <- c("Country","People.and.Society..Life.expectancy.at.birth...male",
"People.and.Society..Life.expectancy.at.birth...female",
"People.and.Society..Education.expenditures","People.and.Society..Literacy...male",
"People.and.Society..Literacy...female","People.and.Society..School.life.expectancy..primary.to.tertiary.education....male",
"People.and.Society..School.life.expectancy..primary.to.tertiary.education....female",
"Economy..Real.GDP..purchasing.power.parity.", "Economy..Real.GDP.growth.rate",
"Economy..Real.GDP.per.capita", "Economy..Inflation.rate..consumer.prices.")
check_dat_red <- check_dat %>% select(all_of(colnames_for_anlysis))
index_2023 <- (grepl("(2023 est.)", check_dat_red$Economy..Real.GDP..purchasing.power.parity.))
check_dat_2023 <- check_dat_red[index_2023,]
colnames(check_dat_2023) <- c("Country",
"Life_expectancy_M",
"Life_expectancy_F",
"Edu_expense",
"Literacy_M",
"Literacy_F",
"School_education_M",
"School_education_F",
"GDP_PPP",
"GDP_growth",
"GDP_per_capita",
"Inflation_rate")
index_bil <- (grepl("billion (2023 est.)", check_dat_2023$GDP_PPP))
index_tril <- (grepl("trillion (2023 est.)", check_dat_2023$GDP_PPP))
index_mil <- (grepl("million (2023 est.)", check_dat_2023$GDP_PPP))
View(check_dat_2023)
index_bil
check_dat_2023$GDP_PPP
index_bil <- (grepl("billion (2023 est.)", check_dat_2023$GDP_PPP))
check_dat <- read.csv("countries.csv")
colnames_for_anlysis <- c("Country","People.and.Society..Life.expectancy.at.birth...male",
"People.and.Society..Life.expectancy.at.birth...female",
"People.and.Society..Education.expenditures","People.and.Society..Literacy...male",
"People.and.Society..Literacy...female","People.and.Society..School.life.expectancy..primary.to.tertiary.education....male",
"People.and.Society..School.life.expectancy..primary.to.tertiary.education....female",
"Economy..Real.GDP..purchasing.power.parity.", "Economy..Real.GDP.growth.rate",
"Economy..Real.GDP.per.capita", "Economy..Inflation.rate..consumer.prices.")
check_dat_red <- check_dat %>% select(all_of(colnames_for_anlysis))
index_2023 <- (grepl("(2023 est.)", check_dat_red$Economy..Real.GDP..purchasing.power.parity.))
check_dat_2023 <- check_dat_red[index_2023,]
index_bil <- (grepl("billion (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity.))
index_bil <- (grepl("billion (2023 est.)", check_dat_red$Economy..Real.GDP..purchasing.power.parity.))
index_bil <- (grepl("billion (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity.))
check_dat_2023$Economy..Real.GDP..purchasing.power.parity.
index_bil <- (grepl("billion (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
index_tril <- (grepl("trillion (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
index_mil <- (grepl("million (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
?grepl
index_2023 <- (grepl("(2023 est.)", check_dat_red$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
check_dat_2023 <- check_dat_red[index_2023,]
index_bil <- (grepl("billion (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
index_tril <- (grepl("trillion (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
index_mil <- (grepl("million (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
sum(index_bil) + sum(index_mil) + sum(index_tril)
colnames(check_dat_2023) <- c("Country",
"Life_expectancy_M",
"Life_expectancy_F",
"Edu_expense",
"Literacy_M",
"Literacy_F",
"School_education_M",
"School_education_F",
"GDP_PPP",
"GDP_growth",
"GDP_per_capita",
"Inflation_rate")
check_dat_2023$GDP_PPP[index_bil] = 1000 * check_dat_2023$GDP_PPP[index_bil]
library(readr)
check_dat_2023 = check_dat_2023 %>%
mutate(across(.fns = parse_number))
View(check_dat_2023)
?across
check_dat_2023 <- check_dat_red[index_2023,]
index_bil <- (grepl("billion (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
index_tril <- (grepl("trillion (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
index_mil <- (grepl("million (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
colnames(check_dat_2023) <- c("Country",
"Life_expectancy_M",
"Life_expectancy_F",
"Edu_expense",
"Literacy_M",
"Literacy_F",
"School_education_M",
"School_education_F",
"GDP_PPP",
"GDP_growth",
"GDP_per_capita",
"Inflation_rate")
library(readr)
check_dat_2023 = check_dat_2023 %>%
mutate(across(-c(Country),.fns = parse_number))
View(check_dat_2023)
check_dat_2023$GDP_PPP[index_bil] = 1000 * check_dat_2023$GDP_PPP[index_bil]
check_dat_2023$GDP_PPP[index_tril] = 1000000 * check_dat_2023$GDP_PPP[index_tril]
check_dat_2023 <- na.omit(check_dat)
check_dat <- read.csv("countries.csv")
colnames_for_anlysis <- c("Country","People.and.Society..Life.expectancy.at.birth...male",
"People.and.Society..Life.expectancy.at.birth...female",
"People.and.Society..Education.expenditures","People.and.Society..Literacy...male",
"People.and.Society..Literacy...female","People.and.Society..School.life.expectancy..primary.to.tertiary.education....male",
"People.and.Society..School.life.expectancy..primary.to.tertiary.education....female",
"Economy..Real.GDP..purchasing.power.parity.", "Economy..Real.GDP.growth.rate",
"Economy..Real.GDP.per.capita", "Economy..Inflation.rate..consumer.prices.")
check_dat_red <- check_dat %>% select(all_of(colnames_for_anlysis))
index_2023 <- (grepl("(2023 est.)", check_dat_red$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
check_dat_2023 <- check_dat_red[index_2023,]
index_bil <- (grepl("billion (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
index_tril <- (grepl("trillion (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
index_mil <- (grepl("million (2023 est.)", check_dat_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
colnames(check_dat_2023) <- c("Country",
"Life_expectancy_M",
"Life_expectancy_F",
"Edu_expense",
"Literacy_M",
"Literacy_F",
"School_education_M",
"School_education_F",
"GDP_PPP",
"GDP_growth",
"GDP_per_capita",
"Inflation_rate")
library(readr)
check_dat_2023 = check_dat_2023 %>%
mutate(across(-c(Country),.fns = parse_number))
check_dat_2023$GDP_PPP[index_bil] = 1000 * check_dat_2023$GDP_PPP[index_bil]
check_dat_2023$GDP_PPP[index_tril] = 1000000 * check_dat_2023$GDP_PPP[index_tril]
check_dat_2023 <- na.omit(check_dat_2023)
View(check_dat_2023)
cia_wf_data <- read.csv("countries.csv")
colnames_for_anlysis <- c("Country","People.and.Society..Life.expectancy.at.birth...male",
"People.and.Society..Life.expectancy.at.birth...female",
"Economy..Real.GDP..purchasing.power.parity.")
cia_wf_data_le_vs_gdp <- cia_wf_data %>% select(all_of(colnames_for_anlysis))
index_2023 <- (grepl("(2023 est.)", cia_wf_data_le_vs_gdp$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
cia_wf_data_2023 <- cia_wf_data_le_vs_gdp[index_2023,]
index_bil <- (grepl("billion (2023 est.)", cia_wf_data_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
index_tril <- (grepl("trillion (2023 est.)", cia_wf_data_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
index_mil <- (grepl("million (2023 est.)", cia_wf_data_2023$Economy..Real.GDP..purchasing.power.parity., fixed = TRUE))
colnames(cia_wf_data_2023) <- c("Country",
"Life_expectancy_M",
"Life_expectancy_F",
"GDP_PPP")
library(readr)
cia_wf_data_2023 = cia_wf_data_2023 %>%
mutate(across(-c(Country),.fns = parse_number))
cia_wf_data_2023$GDP_PPP[index_bil] = 1000 * cia_wf_data_2023$GDP_PPP[index_bil]
cia_wf_data_2023$GDP_PPP[index_tril] = 1000000 * cia_wf_data_2023$GDP_PPP[index_tril]
cia_wf_data_2023 <- na.omit(cia_wf_data_2023)
View(cia_wf_data_2023)
plot(cia_wf_data_2023$GDP_PPP,cia_wf_data_2023$Life_expectancy_M)
plot(log(cia_wf_data_2023$GDP_PPP),cia_wf_data_2023$Life_expectancy_M)
plot(log(cia_wf_data_2023$GDP_PPP),cia_wf_data_2023$Life_expectancy_F)
U1 = ecdf(cia_wf_data_2023$Life_expectancy_F)(cia_wf_data_2023$Life_expectancy_F)
U2 = ecdf(cia_wf_data_2023$Life_expectancy_M)(cia_wf_data_2023$Life_expectancy_M)
plot(U1,U2)
colnames(cia_wf_data)
