trace.depth
trace.loglik
pred_cond = lapply(1:nrow(X_obs.norm), function(i)apply_fun_models(fun_ = function(x)get_value_tree(x, X_obs.norm[i,,drop = FALSE]),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par))
pred_cond = do.call(rbind,pred_cond)
pred_cond$obs = as.vector(apply(X_obs.norm, 1, function(x)rep(x, (length(model.list.def) * n.chain_par * (n.iter_par - n.born.out.par)))))
pred_cond$theta_true = as.vector(apply(BiCopTau2Par(family = 3, get(paste0("tau_true_",test_case))), 1, function(x)rep(x, (length(model.list.def) * n.chain_par * (n.iter_par - n.born.out.par)))))
pred_cond_thin = na.omit(pred_cond[c(rep(NA,9), TRUE),])
pred_cond_mod = pred_cond_thin %>%
group_by(panel.name, obs, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
copula_uu_clayton_pred <- BiCopSim(N = nrow(pred_cond_mod), family = 3, par = pred_cond_mod$theta_mean)
pred_cond_mod$U1 = copula_uu_clayton_pred[,1]
pred_cond_mod$U2 = copula_uu_clayton_pred[,2]
pred_cond_stat = pred_cond_mod %>%
group_by(panel.name)%>%
mutate(RMSE = mean((theta_true - theta_mean)^2)) %>%
mutate(CI.length = mean(theta_q975 - theta_q025)) %>%
mutate(CI.cov = mean((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = pred_cond_stat %>%
group_by(panel.name)%>%
summarise_all(mean)
tree_stat_summary = df.sum.def_thin %>%
group_by(panel.name)%>%
summarise_at(c("nterm","depth","acc_rate"),mean)
xtable(cbind(tree_stat_summary, pred_cond_summary[,-1]) , digits = 4)
source("~/GitHub/Copula-estimation-using-loss-based-BART/codes/cond_copula_bayes.R")
test_case = 1
n.born.out.par = 5000
model.list.def <- list(
get(paste0("gumbel_mcmc_lb.def_IG22_",test_case)),
get(paste0("gumbel_mcmc_lb.def_IG11_",test_case)),
get(paste0("gumbel_mcmc_lb.def_LN01_",test_case)),
get(paste0("gumbel_mcmc_lb.def_LN05_",test_case)) #,
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_IG11_",test_case)),
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_IG22_",test_case)),
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_LN01_",test_case)),
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_LN05_",test_case))
)
names(model.list.def) <- c(
'LB - default - IG22',
'LB - default - IG11',
'LB - default - LN01',
'LB - default - LN05'#,
# 'LB - high.gam - IG11',
# 'LB - high.gam - IG22',
# 'LB - high.gam - LN01',
# 'LB - high.gam - LN05'
)
# extract depth, number of terminal nodes, missing rate and loglik of all the trees
depth.df <- apply_fun_models(fun_ = get_depth,
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
nterm.df <- apply_fun_models(fun_ = get_num_terminal_nodes,
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
like.df <- apply_fun_models(fun_ = \(x) cart_log_lik_copula(tree_top = x, U1 = get(paste0("copula_uu_gumbel_",i))[,1],
U2 = get(paste0("copula_uu_gumbel_",i))[,2],
X = X_obs.norm, cop_type = "gumbel"),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
acc.df <- apply_fun_models_res(fun_ = \(x) (as.factor(x) == TRUE),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
View(gumbel_mcmc_lb.def_LN05_2)
depth.df_thin <- na.omit(depth.df[c(rep(NA,9), TRUE),])
nterm.df_thin <- na.omit(nterm.df[c(rep(NA,9), TRUE),])
like.df_thin <- na.omit(like.df[c(rep(NA,9), TRUE),])
acc.df_thin <- na.omit(acc.df[c(rep(NA,9), TRUE),])
df.sum.def <- data.frame(tree = nterm.df$x,
panel.name = nterm.df$panel.name,
loglik = like.df$y,
nterm = nterm.df$y)
df.sum.def_thin <- data.frame(tree = nterm.df_thin$x,
panel.name = nterm.df_thin$panel.name,
loglik = like.df_thin$y,
nterm = nterm.df_thin$y,
depth = depth.df_thin$y,
acc_rate = acc.df_thin$y)
hist.nl <- ggplot(nterm.df_thin) +
geom_histogram(aes(x = y, y = after_stat(density)),
binwidth = 1, color = 'black', fill = 'white') +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab(~n[L]) +
ylab('PMF') +
theme_classic()
hist.depth <- ggplot(depth.df_thin) +
geom_histogram(aes(x = y, y = after_stat(density)),
binwidth = 1, color = 'black', fill = 'white') +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('Depth') +
ylab('PMF') +
theme_classic()
trace.nl <- ggplot(nterm.df_thin) +
geom_line(aes(x/10, y)) +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('Iteration') +
ylab(~n[L]) +
theme_classic() +
scale_x_continuous(breaks = seq(0,1000,by = 200))
trace.depth <- ggplot(depth.df_thin) +
geom_line(aes(x/10, y)) +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('Iteration') +
ylab('Depth') +
theme_classic() +
scale_x_continuous(breaks = seq(0,1000,by = 200))
trace.loglik <- ggplot(df.sum.def, aes(tree/10, loglik)) +
geom_line() +
facet_wrap(facets = ~panel.name) +
theme_classic() +
xlab('Iteration') +
ylab('Log likelihood') +
scale_x_continuous(breaks = seq(0,1000,by = 200))
hist.nl
hist.depth
trace.nl
trace.depth
trace.loglik
pred_cond = lapply(1:nrow(X_obs.norm), function(i)apply_fun_models(fun_ = function(x)get_value_tree(x, X_obs.norm[i,,drop = FALSE]),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par))
pred_cond = do.call(rbind,pred_cond)
pred_cond$obs = as.vector(apply(X_obs.norm, 1, function(x)rep(x, (length(model.list.def) * n.chain_par * (n.iter_par - n.born.out.par)))))
pred_cond$theta_true = as.vector(apply(BiCopTau2Par(family = 4, get(paste0("tau_true_",test_case))), 1, function(x)rep(x, (length(model.list.def) * n.chain_par * (n.iter_par - n.born.out.par)))))
pred_cond_thin = na.omit(pred_cond[c(rep(NA,9), TRUE),])
pred_cond_mod = pred_cond_thin %>%
group_by(panel.name, obs, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
copula_uu_gumbel_pred <- BiCopSim(N = nrow(pred_cond_mod), family = 4, par = pmax(pred_cond_mod$theta_mean,1))
pred_cond_mod$U1 = copula_uu_gumbel_pred[,1]
pred_cond_mod$U2 = copula_uu_gumbel_pred[,2]
pred_cond_stat = pred_cond_mod %>%
group_by(panel.name)%>%
mutate(RMSE = mean((theta_true - theta_mean)^2)) %>%
mutate(CI.length = mean(theta_q975 - theta_q025)) %>%
mutate(CI.cov = mean((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = pred_cond_stat %>%
group_by(panel.name)%>%
summarise_all(mean)
tree_stat_summary = df.sum.def_thin %>%
group_by(panel.name)%>%
summarise_at(c("nterm","depth","acc_rate"),mean)
xtable(cbind(tree_stat_summary, pred_cond_summary[,-1]) , digits = 4)
test_case = 2
n.born.out.par = 5000
model.list.def <- list(
get(paste0("gumbel_mcmc_lb.def_IG22_",test_case)),
get(paste0("gumbel_mcmc_lb.def_IG11_",test_case)),
get(paste0("gumbel_mcmc_lb.def_LN01_",test_case)),
get(paste0("gumbel_mcmc_lb.def_LN05_",test_case)) #,
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_IG11_",test_case)),
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_IG22_",test_case)),
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_LN01_",test_case)),
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_LN05_",test_case))
)
names(model.list.def) <- c(
'LB - default - IG22',
'LB - default - IG11',
'LB - default - LN01',
'LB - default - LN05'#,
# 'LB - high.gam - IG11',
# 'LB - high.gam - IG22',
# 'LB - high.gam - LN01',
# 'LB - high.gam - LN05'
)
# extract depth, number of terminal nodes, missing rate and loglik of all the trees
depth.df <- apply_fun_models(fun_ = get_depth,
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
nterm.df <- apply_fun_models(fun_ = get_num_terminal_nodes,
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
like.df <- apply_fun_models(fun_ = \(x) cart_log_lik_copula(tree_top = x, U1 = get(paste0("copula_uu_gumbel_",i))[,1],
U2 = get(paste0("copula_uu_gumbel_",i))[,2],
X = X_obs.norm, cop_type = "gumbel"),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
acc.df <- apply_fun_models_res(fun_ = \(x) (as.factor(x) == TRUE),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
depth.df_thin <- na.omit(depth.df[c(rep(NA,9), TRUE),])
nterm.df_thin <- na.omit(nterm.df[c(rep(NA,9), TRUE),])
like.df_thin <- na.omit(like.df[c(rep(NA,9), TRUE),])
acc.df_thin <- na.omit(acc.df[c(rep(NA,9), TRUE),])
df.sum.def <- data.frame(tree = nterm.df$x,
panel.name = nterm.df$panel.name,
loglik = like.df$y,
nterm = nterm.df$y)
df.sum.def_thin <- data.frame(tree = nterm.df_thin$x,
panel.name = nterm.df_thin$panel.name,
loglik = like.df_thin$y,
nterm = nterm.df_thin$y,
depth = depth.df_thin$y,
acc_rate = acc.df_thin$y)
hist.nl <- ggplot(nterm.df_thin) +
geom_histogram(aes(x = y, y = after_stat(density)),
binwidth = 1, color = 'black', fill = 'white') +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab(~n[L]) +
ylab('PMF') +
theme_classic()
hist.depth <- ggplot(depth.df_thin) +
geom_histogram(aes(x = y, y = after_stat(density)),
binwidth = 1, color = 'black', fill = 'white') +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('Depth') +
ylab('PMF') +
theme_classic()
trace.nl <- ggplot(nterm.df_thin) +
geom_line(aes(x/10, y)) +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('Iteration') +
ylab(~n[L]) +
theme_classic() +
scale_x_continuous(breaks = seq(0,1000,by = 200))
trace.depth <- ggplot(depth.df_thin) +
geom_line(aes(x/10, y)) +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('Iteration') +
ylab('Depth') +
theme_classic() +
scale_x_continuous(breaks = seq(0,1000,by = 200))
trace.loglik <- ggplot(df.sum.def, aes(tree/10, loglik)) +
geom_line() +
facet_wrap(facets = ~panel.name) +
theme_classic() +
xlab('Iteration') +
ylab('Log likelihood') +
scale_x_continuous(breaks = seq(0,1000,by = 200))
hist.nl
hist.depth
trace.nl
trace.depth
trace.loglik
pred_cond = lapply(1:nrow(X_obs.norm), function(i)apply_fun_models(fun_ = function(x)get_value_tree(x, X_obs.norm[i,,drop = FALSE]),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par))
pred_cond = do.call(rbind,pred_cond)
pred_cond$obs = as.vector(apply(X_obs.norm, 1, function(x)rep(x, (length(model.list.def) * n.chain_par * (n.iter_par - n.born.out.par)))))
pred_cond$theta_true = as.vector(apply(BiCopTau2Par(family = 4, get(paste0("tau_true_",test_case))), 1, function(x)rep(x, (length(model.list.def) * n.chain_par * (n.iter_par - n.born.out.par)))))
pred_cond_thin = na.omit(pred_cond[c(rep(NA,9), TRUE),])
pred_cond_mod = pred_cond_thin %>%
group_by(panel.name, obs, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
copula_uu_gumbel_pred <- BiCopSim(N = nrow(pred_cond_mod), family = 4, par = pmax(pred_cond_mod$theta_mean,1))
pred_cond_mod$U1 = copula_uu_gumbel_pred[,1]
pred_cond_mod$U2 = copula_uu_gumbel_pred[,2]
pred_cond_stat = pred_cond_mod %>%
group_by(panel.name)%>%
mutate(RMSE = mean((theta_true - theta_mean)^2)) %>%
mutate(CI.length = mean(theta_q975 - theta_q025)) %>%
mutate(CI.cov = mean((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = pred_cond_stat %>%
group_by(panel.name)%>%
summarise_all(mean)
tree_stat_summary = df.sum.def_thin %>%
group_by(panel.name)%>%
summarise_at(c("nterm","depth","acc_rate"),mean)
xtable(cbind(tree_stat_summary, pred_cond_summary[,-1]) , digits = 4)
test_case = 3
n.born.out.par = 5000
model.list.def <- list(
get(paste0("gumbel_mcmc_lb.def_IG22_",test_case)),
get(paste0("gumbel_mcmc_lb.def_IG11_",test_case)),
get(paste0("gumbel_mcmc_lb.def_LN01_",test_case)),
get(paste0("gumbel_mcmc_lb.def_LN05_",test_case)) #,
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_IG11_",test_case)),
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_IG22_",test_case)),
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_LN01_",test_case)),
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_LN05_",test_case))
)
names(model.list.def) <- c(
'LB - default - IG22',
'LB - default - IG11',
'LB - default - LN01',
'LB - default - LN05'#,
# 'LB - high.gam - IG11',
# 'LB - high.gam - IG22',
# 'LB - high.gam - LN01',
# 'LB - high.gam - LN05'
)
# extract depth, number of terminal nodes, missing rate and loglik of all the trees
depth.df <- apply_fun_models(fun_ = get_depth,
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
nterm.df <- apply_fun_models(fun_ = get_num_terminal_nodes,
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
like.df <- apply_fun_models(fun_ = \(x) cart_log_lik_copula(tree_top = x, U1 = get(paste0("copula_uu_gumbel_",i))[,1],
U2 = get(paste0("copula_uu_gumbel_",i))[,2],
X = X_obs.norm, cop_type = "gumbel"),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
acc.df <- apply_fun_models_res(fun_ = \(x) (as.factor(x) == TRUE),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
depth.df_thin <- na.omit(depth.df[c(rep(NA,9), TRUE),])
nterm.df_thin <- na.omit(nterm.df[c(rep(NA,9), TRUE),])
like.df_thin <- na.omit(like.df[c(rep(NA,9), TRUE),])
acc.df_thin <- na.omit(acc.df[c(rep(NA,9), TRUE),])
df.sum.def <- data.frame(tree = nterm.df$x,
panel.name = nterm.df$panel.name,
loglik = like.df$y,
nterm = nterm.df$y)
df.sum.def_thin <- data.frame(tree = nterm.df_thin$x,
panel.name = nterm.df_thin$panel.name,
loglik = like.df_thin$y,
nterm = nterm.df_thin$y,
depth = depth.df_thin$y,
acc_rate = acc.df_thin$y)
hist.nl <- ggplot(nterm.df_thin) +
geom_histogram(aes(x = y, y = after_stat(density)),
binwidth = 1, color = 'black', fill = 'white') +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab(~n[L]) +
ylab('PMF') +
theme_classic()
hist.depth <- ggplot(depth.df_thin) +
geom_histogram(aes(x = y, y = after_stat(density)),
binwidth = 1, color = 'black', fill = 'white') +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('Depth') +
ylab('PMF') +
theme_classic()
trace.nl <- ggplot(nterm.df_thin) +
geom_line(aes(x/10, y)) +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('Iteration') +
ylab(~n[L]) +
theme_classic() +
scale_x_continuous(breaks = seq(0,1000,by = 200))
trace.depth <- ggplot(depth.df_thin) +
geom_line(aes(x/10, y)) +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('Iteration') +
ylab('Depth') +
theme_classic() +
scale_x_continuous(breaks = seq(0,1000,by = 200))
trace.loglik <- ggplot(df.sum.def, aes(tree/10, loglik)) +
geom_line() +
facet_wrap(facets = ~panel.name) +
theme_classic() +
xlab('Iteration') +
ylab('Log likelihood') +
scale_x_continuous(breaks = seq(0,1000,by = 200))
hist.nl
hist.depth
trace.nl
trace.depth
trace.loglik
pred_cond = lapply(1:nrow(X_obs.norm), function(i)apply_fun_models(fun_ = function(x)get_value_tree(x, X_obs.norm[i,,drop = FALSE]),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par))
pred_cond = do.call(rbind,pred_cond)
pred_cond$obs = as.vector(apply(X_obs.norm, 1, function(x)rep(x, (length(model.list.def) * n.chain_par * (n.iter_par - n.born.out.par)))))
pred_cond$theta_true = as.vector(apply(BiCopTau2Par(family = 4, get(paste0("tau_true_",test_case))), 1, function(x)rep(x, (length(model.list.def) * n.chain_par * (n.iter_par - n.born.out.par)))))
pred_cond_thin = na.omit(pred_cond[c(rep(NA,9), TRUE),])
pred_cond_mod = pred_cond_thin %>%
group_by(panel.name, obs, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
copula_uu_gumbel_pred <- BiCopSim(N = nrow(pred_cond_mod), family = 4, par = pmax(pred_cond_mod$theta_mean,1))
pred_cond_mod$U1 = copula_uu_gumbel_pred[,1]
pred_cond_mod$U2 = copula_uu_gumbel_pred[,2]
pred_cond_stat = pred_cond_mod %>%
group_by(panel.name)%>%
mutate(RMSE = mean((theta_true - theta_mean)^2)) %>%
mutate(CI.length = mean(theta_q975 - theta_q025)) %>%
mutate(CI.cov = mean((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = pred_cond_stat %>%
group_by(panel.name)%>%
summarise_all(mean)
tree_stat_summary = df.sum.def_thin %>%
group_by(panel.name)%>%
summarise_at(c("nterm","depth","acc_rate"),mean)
xtable(cbind(tree_stat_summary, pred_cond_summary[,-1]) , digits = 4)
test_case = 5
n.born.out.par = 5000
model.list.def <- list(
get(paste0("gumbel_mcmc_lb.def_IG22_",test_case)),
get(paste0("gumbel_mcmc_lb.def_IG11_",test_case)),
get(paste0("gumbel_mcmc_lb.def_LN01_",test_case)),
get(paste0("gumbel_mcmc_lb.def_LN05_",test_case)) #,
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_IG11_",test_case)),
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_IG22_",test_case)),
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_LN01_",test_case)),
# get(paste0("gumbel_mcmc_lossb.prior.high.gam_LN05_",test_case))
)
names(model.list.def) <- c(
'LB - default - IG22',
'LB - default - IG11',
'LB - default - LN01',
'LB - default - LN05'#,
# 'LB - high.gam - IG11',
# 'LB - high.gam - IG22',
# 'LB - high.gam - LN01',
# 'LB - high.gam - LN05'
)
# extract depth, number of terminal nodes, missing rate and loglik of all the trees
depth.df <- apply_fun_models(fun_ = get_depth,
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
nterm.df <- apply_fun_models(fun_ = get_num_terminal_nodes,
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
like.df <- apply_fun_models(fun_ = \(x) cart_log_lik_copula(tree_top = x, U1 = get(paste0("copula_uu_gumbel_",i))[,1],
U2 = get(paste0("copula_uu_gumbel_",i))[,2],
X = X_obs.norm, cop_type = "gumbel"),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
acc.df <- apply_fun_models_res(fun_ = \(x) (as.factor(x) == TRUE),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par)
depth.df_thin <- na.omit(depth.df[c(rep(NA,9), TRUE),])
nterm.df_thin <- na.omit(nterm.df[c(rep(NA,9), TRUE),])
like.df_thin <- na.omit(like.df[c(rep(NA,9), TRUE),])
acc.df_thin <- na.omit(acc.df[c(rep(NA,9), TRUE),])
df.sum.def <- data.frame(tree = nterm.df$x,
panel.name = nterm.df$panel.name,
loglik = like.df$y,
nterm = nterm.df$y)
df.sum.def_thin <- data.frame(tree = nterm.df_thin$x,
panel.name = nterm.df_thin$panel.name,
loglik = like.df_thin$y,
nterm = nterm.df_thin$y,
depth = depth.df_thin$y,
acc_rate = acc.df_thin$y)
hist.nl <- ggplot(nterm.df_thin) +
geom_histogram(aes(x = y, y = after_stat(density)),
binwidth = 1, color = 'black', fill = 'white') +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab(~n[L]) +
ylab('PMF') +
theme_classic()
hist.depth <- ggplot(depth.df_thin) +
geom_histogram(aes(x = y, y = after_stat(density)),
binwidth = 1, color = 'black', fill = 'white') +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('Depth') +
ylab('PMF') +
theme_classic()
trace.nl <- ggplot(nterm.df_thin) +
geom_line(aes(x/10, y)) +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('Iteration') +
ylab(~n[L]) +
theme_classic() +
scale_x_continuous(breaks = seq(0,1000,by = 200))
trace.depth <- ggplot(depth.df_thin) +
geom_line(aes(x/10, y)) +
facet_wrap(facets = ~panel.name, ncol = 2) +
xlab('Iteration') +
ylab('Depth') +
theme_classic() +
scale_x_continuous(breaks = seq(0,1000,by = 200))
trace.loglik <- ggplot(df.sum.def, aes(tree/10, loglik)) +
geom_line() +
facet_wrap(facets = ~panel.name) +
theme_classic() +
xlab('Iteration') +
ylab('Log likelihood') +
scale_x_continuous(breaks = seq(0,1000,by = 200))
hist.nl
hist.depth
trace.nl
trace.depth
trace.loglik
pred_cond = lapply(1:nrow(X_obs.norm), function(i)apply_fun_models(fun_ = function(x)get_value_tree(x, X_obs.norm[i,,drop = FALSE]),
mcmc.list = model.list.def,
born.out.pc = n.born.out.par, n.chain = n.chain_par, sample.pc = n.iter_par))
pred_cond = do.call(rbind,pred_cond)
pred_cond$obs = as.vector(apply(X_obs.norm, 1, function(x)rep(x, (length(model.list.def) * n.chain_par * (n.iter_par - n.born.out.par)))))
pred_cond$theta_true = as.vector(apply(BiCopTau2Par(family = 4, get(paste0("tau_true_",test_case))), 1, function(x)rep(x, (length(model.list.def) * n.chain_par * (n.iter_par - n.born.out.par)))))
pred_cond_thin = na.omit(pred_cond[c(rep(NA,9), TRUE),])
pred_cond_mod = pred_cond_thin %>%
group_by(panel.name, obs, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
copula_uu_gumbel_pred <- BiCopSim(N = nrow(pred_cond_mod), family = 4, par = pmax(pred_cond_mod$theta_mean,1))
pred_cond_mod$U1 = copula_uu_gumbel_pred[,1]
pred_cond_mod$U2 = copula_uu_gumbel_pred[,2]
pred_cond_stat = pred_cond_mod %>%
group_by(panel.name)%>%
mutate(RMSE = mean((theta_true - theta_mean)^2)) %>%
mutate(CI.length = mean(theta_q975 - theta_q025)) %>%
mutate(CI.cov = mean((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = pred_cond_stat %>%
group_by(panel.name)%>%
summarise_all(mean)
tree_stat_summary = df.sum.def_thin %>%
group_by(panel.name)%>%
summarise_at(c("nterm","depth","acc_rate"),mean)
xtable(cbind(tree_stat_summary, pred_cond_summary[,-1]) , digits = 4)
save.image("~/GitHub/Copula-estimation-using-loss-based-BART/codes/analysis_copula_gumbel.RData")
source('code/import_functions.R')
source('mclapply.R')
source('MCMC_BART_copula.R')
library(data.tree)
View(joint.prior.new.tree)
View(MCMC_binary)
View(tree_step_binary)
View(acceptance.prob.list_binary)
View(multichain_MCMC_binary)
View(joint.prior.new)
View(joint.prior.new)
View(multichain_MCMC_binary)
View(MCMC_binary)
