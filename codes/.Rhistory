source("~/.active-rstudio-document")
ggplot(df, aes(x = Value, y = Bid)) +
geom_point(alpha = 0.3) +
geom_abline(intercept = 0, slope = (n_bidders-1)/n_bidders, color="red") +
labs(title = "First-Price Auction Equilibrium Bidding",
x = "Private Value",
y = "Bid")
# Set up the simulation
set.seed(123) # For reproducibility
# Parameters
num_bidders <- 5                # Number of bidders
num_simulations <- 1000         # Number of auction simulations
reserve_mean <- 50              # Mean of the reserve price
reserve_sd <- 10                # Standard deviation of the reserve price
value_mean <- 100               # Mean of bidders' values
value_sd <- 20                  # Standard deviation of bidders' values
# Function to calculate optimal bidding value for a first-price auction
calculate_optimal_bid_fpa <- function(my_value, reserve_price, competitor_values) {
competitor_values <- competitor_values[competitor_values >= reserve_price]
num_competitors <- length(competitor_values)
# If no competitors or value is less than reserve price, do not bid
if (num_competitors == 0 || my_value <= reserve_price) {
return(NA) # Do not bid
}
# Estimate optimal bid by shading strategy (adjusting for risk neutrality)
# Optimal bid is proportional to (value - reserve price) scaled by competition
expected_competitor_max <- ifelse(num_competitors > 0, mean(competitor_values), reserve_price)
optimal_bid <- reserve_price + (my_value - reserve_price) * (num_competitors / (num_competitors + 1))
return(min(optimal_bid, my_value))
}
# Initialize results
results <- data.frame(simulation = 1:num_simulations,
highest_bid = NA,
reserve_price = NA,
sold = NA,
sale_price = NA,
optimal_bid = NA)
# Simulation loop
for (sim in 1:num_simulations) {
# Generate uncertain reserve price
reserve_price <- rnorm(1, mean = reserve_mean, sd = reserve_sd)
# Generate bidders' values
bidder_values <- rnorm(num_bidders, mean = value_mean, sd = value_sd)
# Assume the first bidder is the focal bidder
my_value <- bidder_values[1]
competitor_values <- bidder_values[-1]
# Calculate optimal bid for the focal bidder in a first-price auction
optimal_bid <- calculate_optimal_bid_fpa(my_value, reserve_price, competitor_values)
# Simulate the bidding process (First-price auction)
bids <- c(optimal_bid, competitor_values[competitor_values >= reserve_price])
bids <- bids[!is.na(bids)]
bids <- sort(bids, decreasing = TRUE)
# Determine the outcome
if (length(bids) > 0 && bids[1] >= reserve_price) {
highest_bid <- bids[1] # Winning bid
sale_price <- highest_bid # Sale price is the winning bid in first-price auction
sold <- TRUE
} else {
highest_bid <- NA
sale_price <- NA
sold <- FALSE
}
# Store results
results[sim, ] <- c(sim, highest_bid, reserve_price, sold, sale_price, optimal_bid)
}
# Analyze the results
summary_results <- data.frame(
total_auctions = num_simulations,
items_sold = sum(results$sold, na.rm = TRUE),
average_sale_price = mean(results$sale_price, na.rm = TRUE),
average_reserve_price = mean(results$reserve_price),
average_highest_bid = mean(results$highest_bid, na.rm = TRUE),
average_optimal_bid = mean(results$optimal_bid, na.rm = TRUE)
)
# Print results
print("Summary of Auction Simulations:")
print(summary_results)
# Plotting the results
library(ggplot2)
# Distribution of reserve prices
ggplot(results, aes(x = reserve_price)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Reserve Prices",
x = "Reserve Price",
y = "Frequency") +
theme_minimal()
# Distribution of highest bids
ggplot(results, aes(x = highest_bid)) +
geom_histogram(binwidth = 5, fill = "green", color = "black", alpha = 0.7) +
labs(title = "Distribution of Highest Bids",
x = "Highest Bid",
y = "Frequency") +
theme_minimal()
# Sale vs. No Sale Analysis
ggplot(results, aes(x = as.factor(sold), fill = as.factor(sold))) +
geom_bar() +
labs(title = "Auction Outcomes: Items Sold vs. Unsold",
x = "Outcome (0 = Unsold, 1 = Sold)",
y = "Count") +
scale_fill_manual(values = c("red", "green"), labels = c("Unsold", "Sold")) +
theme_minimal()
# Optimal Bids Distribution
ggplot(results, aes(x = optimal_bid)) +
geom_histogram(binwidth = 5, fill = "purple", color = "black", alpha = 0.7) +
labs(title = "Distribution of Optimal Bids",
x = "Optimal Bid",
y = "Frequency") +
theme_minimal()
source("~/.active-rstudio-document")
library(doParallel)
detectCores()
?detectCores
detectCores(logical = F)
setwd("~/Documents/GitHub/Copula-estimation-using-loss-based-BART/codes")
# packages
library(VineCopula)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(MASS)   # For multivariate normal functions
library(coda)   # For MCMC diagnostics
library(plot3D)
library(gplots)
library(xtable)
library(patchwork)
library(parallel)
library(mc2d)
library(pracma)
################################################################################
# data generation
################################################################################
set.seed(1e3)
n <- 500
X_obs <- matrix(runif(n), ncol = 1)
# normalise predictors
X_obs.norm <- as.data.frame(apply(X_obs, 2, \(x) (x - min(x))/(max(x) - min(x))))
X_obs.norm <- as.matrix(X_obs.norm)
rownames(X_obs.norm) <- 1:nrow(X_obs)
# tau with tree structure
tau_true_1 <- rep(0,nrow(X_obs))
tau_true_1[X_obs<0.33] <- 0.1
tau_true_1[(X_obs>=0.33)&(X_obs<0.66)] <- 0.7
tau_true_1[(X_obs>=0.66)] <- 0.3
tau_true_1 <- matrix(tau_true_1, ncol = 1)
# periodoic
tau_true_2 <- 0.2*sin(2*pi*X_obs) + 0.5
plot(X_obs, tau_true_1, xlab = "Observations", ylab = "tau")
plot(X_obs, tau_true_2, xlab = "Observations", ylab = "tau")
for (i in 1:2) {
assign(paste0("copula_uu_gauss_",i), BiCopSim(n, family = 1, par = sin(get(paste0("tau_true_",i)) * pi/2)))
}
for (i in 1:2) {
assign(paste0("copula_uu_t_",i), BiCopSim(n, family = 2, par = sin(get(paste0("tau_true_",i)) * pi/2), par2 = 3))
}
for (i in 1:2) {
assign(paste0("copula_uu_gumbel_",i), BiCopSim(n, family = 4, par = 1/(1-get(paste0("tau_true_",i)))))
}
for (i in 1:2) {
assign(paste0("copula_uu_clayton_",i), BiCopSim(n, family = 3, par = (2*get(paste0("tau_true_",i)))/(1-get(paste0("tau_true_",i)))))
}
for (i in 1:2) {
assign(paste0("copula_uu_frank_",i), BiCopSim(n, family = 5, par = BiCopTau2Par(5, get(paste0("tau_true_",i)))))
}
n.chain_par <- 20
n.iter_par <- 6000
n.born.out.par <- 1000
n.thin <- 1
incl.split_par <- TRUE
cont.unif_par <- TRUE
source('MCMC_BART_copula.R')
source('import_functions.R')
moves.prob_par <- c(0.1, 0.4, 0.25, 0.25)
lb.prior.def <- list(fun = joint.prior.new.tree, param = c(1.5618883, 0.6293944))
n.tree <- 1
test_case <- 1
load("gauss_mcmc_1_tree_1_dat.Rdata")
pred_cond <- dat_list$pred
pred_cond_mod = pred_cond %>%
filter(idx > 3000) %>%
group_by(obs, chain, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
pred_cond_mod_avg = pred_cond_mod %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(theta_mean), theta_q975 = mean(theta_q975), theta_q025 = mean(theta_q025))
pl_pred <- ggplot(pred_cond_mod_avg) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
xlab('X') +
ylab('estimated tau') +
theme_classic()
pred_cond_stat = pred_cond_mod_avg %>%
mutate(RMSE = ((theta_true - theta_mean)^2)) %>%
mutate(CI.length = (theta_q975 - theta_q025)) %>%
mutate(CI.cov = ((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
load("gauss_mcmc_1_tree_1_plot.Rdata")
pl_nl<-plot_list$nterm
pl_dp<-plot_list$depth
load("gauss_mcmc_1_tree_1_stat.Rdata")
tree_stat_summary <- stat_list$tree
if((n.tree==1)||(test_case == 1)){
stat_list <- list("pred" = pred_cond_summary, "tree" = tree_stat_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred, "depth" = pl_dp, "nterm" = pl_nl)
} else{
stat_list <- list("pred" = pred_cond_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred)
}
pl_like <- plot_list$like
if((n.tree==1)||(test_case == 1)){
stat_list <- list("pred" = pred_cond_summary, "tree" = tree_stat_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred, "depth" = pl_dp, "nterm" = pl_nl)
} else{
stat_list <- list("pred" = pred_cond_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred)
}
save(stat_list, file = paste0("gauss_mcmc_",test_case,"_tree_",n.tree, "_stat.Rdata"))
save(plot_list, file = paste0("gauss_mcmc_",test_case,"_tree_",n.tree, "_plot.Rdata"))
rm(acc_lb.df, depth_lb.df, like_df, list_pred_lb, model, nt_lb.df, pl_dp, pl_like, pl_nl, pred_cond, pred_cond_mod, pred_cond_stat,
pred_val, pred_cond_summary, tree_stat_summary, pl_pred, plot_list, dat_list,stat_list,pred_cond_mod_avg)
gc()
load("gauss_mcmc_1_tree_1_dat_adapt.Rdata")
pred_cond <- dat_list$pred
pred_cond_mod = pred_cond %>%
filter(idx > 3000) %>%
group_by(obs, chain, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
pred_cond_mod_avg = pred_cond_mod %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(theta_mean), theta_q975 = mean(theta_q975), theta_q025 = mean(theta_q025))
pl_pred <- ggplot(pred_cond_mod_avg) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
xlab('X') +
ylab('estimated tau') +
theme_classic()
pred_cond_stat = pred_cond_mod_avg %>%
mutate(RMSE = ((theta_true - theta_mean)^2)) %>%
mutate(CI.length = (theta_q975 - theta_q025)) %>%
mutate(CI.cov = ((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
pl_pred
load("gauss_mcmc_1_tree_1_plot_adapt.Rdata")
pl_like <- plot_list$like
pl_nl <- plot_list$nterm
pl_dp <- plot_list$depth
load("gauss_mcmc_1_tree_1_stat_adapt.Rdata")
tree_stat_summary <- stat_list$tree
tree_stat_summary
if((n.tree==1)||(test_case == 1)){
stat_list <- list("pred" = pred_cond_summary, "tree" = tree_stat_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred, "depth" = pl_dp, "nterm" = pl_nl)
} else{
stat_list <- list("pred" = pred_cond_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred)
}
save(stat_list, file = paste0("gauss_mcmc_",test_case,"_tree_",n.tree, "_stat_adapt.Rdata"))
save(plot_list, file = paste0("gauss_mcmc_",test_case,"_tree_",n.tree, "_plot_adapt.Rdata"))
rm(acc_lb.df, depth_lb.df, like_df, list_pred_lb, model, nt_lb.df, pl_dp, pl_like, pl_nl, pred_cond, pred_cond_mod, pred_cond_stat,
pred_val, pred_cond_summary, tree_stat_summary, pl_pred, plot_list, dat_list,stat_list,pred_cond_mod_avg)
gc()
load("t_mcmc_1_tree_1_dat.Rdata")
pred_cond <- dat_list$pred
pred_cond_mod = pred_cond %>%
filter(idx > 3000) %>%
group_by(obs, chain, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
pred_cond_mod_avg = pred_cond_mod %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(theta_mean), theta_q975 = mean(theta_q975), theta_q025 = mean(theta_q025))
pl_pred <- ggplot(pred_cond_mod_avg) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
xlab('X') +
ylab('estimated tau') +
theme_classic()
pl_pred
pred_cond_stat = pred_cond_mod_avg %>%
mutate(RMSE = ((theta_true - theta_mean)^2)) %>%
mutate(CI.length = (theta_q975 - theta_q025)) %>%
mutate(CI.cov = ((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
load("t_mcmc_1_tree_1_plot.Rdata")
pl_like <- plot_list$like
pl_nl <- plot_list$nterm
pl_dp <-plot_list$depth
load("t_mcmc_1_tree_1_stat.Rdata")
tree_stat_summary <- stat_list$tree
if((n.tree==1)||(test_case == 1)){
stat_list <- list("pred" = pred_cond_summary, "tree" = tree_stat_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred, "depth" = pl_dp, "nterm" = pl_nl)
} else{
stat_list <- list("pred" = pred_cond_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred)
}
save(stat_list, file = paste0("t_mcmc_",test_case,"_tree_",n.tree, "_stat.Rdata"))
save(plot_list, file = paste0("t_mcmc_",test_case,"_tree_",n.tree, "_plot.Rdata"))
load("t_mcmc_1_tree_1_dat_adapt.Rdata")
rm(acc_lb.df, depth_lb.df, like_df, list_pred_lb, model, nt_lb.df, pl_dp, pl_like, pl_nl, pred_cond, pred_cond_mod, pred_cond_stat,
pred_val, pred_cond_summary, tree_stat_summary, pl_pred, plot_list, dat_list,stat_list,pred_cond_mod_avg)
gc()
load("t_mcmc_1_tree_1_dat_adapt.Rdata")
pred_cond <- dat_list$pred
pred_cond_mod = pred_cond %>%
filter(idx > 3000) %>%
group_by(obs, chain, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
pred_cond_mod_avg = pred_cond_mod %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(theta_mean), theta_q975 = mean(theta_q975), theta_q025 = mean(theta_q025))
pl_pred <- ggplot(pred_cond_mod_avg) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
xlab('X') +
ylab('estimated tau') +
theme_classic()
pred_cond_stat = pred_cond_mod_avg %>%
mutate(RMSE = ((theta_true - theta_mean)^2)) %>%
mutate(CI.length = (theta_q975 - theta_q025)) %>%
mutate(CI.cov = ((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
load("t_mcmc_1_tree_1_plot_adapt.Rdata")
pl_like <- plot_list$like
pl_nl <- plot_list$nterm
pl_dp <- plot_list$depth
load("t_mcmc_1_tree_1_stat_adapt.Rdata")
tree_stat_summary <- stat_list$tree
if((n.tree==1)||(test_case == 1)){
stat_list <- list("pred" = pred_cond_summary, "tree" = tree_stat_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred, "depth" = pl_dp, "nterm" = pl_nl)
} else{
stat_list <- list("pred" = pred_cond_summary)
plot_list <- list("like" = pl_like, "pred" = pl_pred)
}
save(stat_list, file = paste0("t_mcmc_",test_case,"_tree_",n.tree, "_stat_adapt.Rdata"))
save(plot_list, file = paste0("t_mcmc_",test_case,"_tree_",n.tree, "_plot_adapt.Rdata"))
rm(acc_lb.df, depth_lb.df, like_df, list_pred_lb, model, nt_lb.df, pl_dp, pl_like, pl_nl, pred_cond, pred_cond_mod, pred_cond_stat,
pred_val, pred_cond_summary, tree_stat_summary, pl_pred, plot_list, dat_list,stat_list,pred_cond_mod_avg)
gc()
load("frank_mcmc_1_tree_1_adapt.Rdata")
rm(frank_mcmc_1_tree_1_adapt)
load("gumbel_mcmc_1_tree_1_dat_adapt.Rdata")
pred_cond <- dat_list$pred
pred_cond_mod = pred_cond %>%
filter(idx > 3000) %>%
group_by(obs, chain, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025))
pred_cond_mod_avg = pred_cond_mod %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(theta_mean), theta_q975 = mean(theta_q975), theta_q025 = mean(theta_q025))
pl_pred <- ggplot(pred_cond_mod_avg) +
geom_point(aes(obs, theta_true), col = 2) +
geom_line(aes(obs, theta_mean)) +
geom_line(aes(obs, theta_q975), col = 3) +
geom_line(aes(obs, theta_q025), col = 3) +
xlab('X') +
ylab('estimated tau') +
theme_classic()
pred_cond_stat = pred_cond_mod_avg %>%
mutate(RMSE = ((theta_true - theta_mean)^2)) %>%
mutate(CI.length = (theta_q975 - theta_q025)) %>%
mutate(CI.cov = ((theta_true < theta_q975) & (theta_true > theta_q025))) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
pl_pred
pred_cond_mod = pred_cond %>%
filter(idx > 3000) %>%
group_by(obs, chain, theta_true) %>%
summarise(theta_mean = mean(y), theta_q975 = quantile(y, .975), theta_q025 = quantile(y, .025)) %>%
mutate(theta_cov = ((theta_true < theta_q975) & (theta_true > theta_q025)))
pred_cond_mod_avg = pred_cond_mod %>%
group_by(obs, theta_true) %>%
summarise(theta_mean = mean(theta_mean), theta_q975 = mean(theta_q975), theta_q025 = mean(theta_q025), theta_cov = mean(theta_cov))
View(pred_cond_mod_avg)
pred_cond_stat = pred_cond_mod_avg %>%
mutate(RMSE = ((theta_true - theta_mean)^2)) %>%
mutate(CI.length = (theta_q975 - theta_q025)) %>%
mutate(CI.cov = theta_cov) %>%
dplyr::select(c(RMSE, CI.length, CI.cov))
pred_cond_summary = colMeans(pred_cond_stat[,-1])
View(pred_cond_mod)
# tau with tree structure
tau_true_1_true <- rep(0,nrow(X_obs))
tau_true_1_true[X_obs<0.33] <- 0.2
tau_true_1_true[(X_obs>=0.33)&(X_obs<0.66)] <- 0.7
tau_true_1_true[(X_obs>=0.66)] <- 0.3
tau_true_1 <- matrix(tau_true_1_true, ncol = 1) + rnorm(n, sd = 0.05)
# periodoic
tau_true_2_true <- 0.2*sin(2*pi*X_obs) + 0.5
tau_true_2 <- tau_true_2_true + rnorm(n, sd = 0.05)
plot(X_obs, tau_true_1, xlab = "Observations", ylab = "tau")
plot(X_obs, tau_true_2, xlab = "Observations", ylab = "tau")
50*500*2000
20*3000*500
