gp_model_landing = km(
formula = ~1,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
covtype = "matern5_2"
)
gp_model_landing
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
covtype = "matern5_2"
)
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
covtype = "matern5_2"
)
gp_model_landing
gp_model_landing = km(
formula = ~.^1,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
covtype = "matern5_2"
)
gp_model_landing = km(
formula = ~.,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
covtype = "matern5_2"
)
gp_model_landing
gp_model_landing = km(
formula = ~.-1,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
covtype = "matern5_2"
)
gp_model_landing
buffer_flight_time = sqrt(gp_model_cruise@covariance@sd2 + gp_model_take_off@covariance@sd2 + gp_model_landing@covariance@sd2)
X_test = train_mat_ref[201:248,-c(1:5)]
pred_land = predict(gp_model_landing, newdata = X_test, type = "UK")
pred_cruise = predict(gp_model_cruise, newdata = X_test, type = "UK")
pred_land = predict(gp_model_landing, newdata = X_test[,c(1,3,6,8:9)], type = "UK")
pred_cruise = predict(gp_model_cruise, newdata = X_test, type = "UK")
pred_to = predict(gp_model_take_off, newdata = X_test, type = "UK")
# plots
plot((pred_to$mean), train_mat_ref[201:248,1], xlab = "Predicted take-off time (sec)", ylab = "Observed take-off time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_cruise$mean), train_mat_ref[201:248,2], xlab = "Predicted cruise time (sec)", ylab = "Observed cruise time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_land$mean), train_mat_ref[201:248,3], xlab = "Predicted landing time (sec)", ylab = "Observed landing time (sec)")
abline(a=0,b=1, lty = 2)
ggplot(data=data.frame(mean = pred_to$mean, obs_val = train_mat_ref[201:248,1]), aes(y=mean, x = obs_val)) + geom_point() +
geom_ribbon(aes(ymin=pred_to$mean - pred_to$sd, ymax=pred_to$mean + pred_to$sd), linetype=2, alpha=0.1) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,linetype="dotted") +
labs(x = "Observed take-off time (sec)", y = "Predicted take-off time (sec)")
ggplot(data=data.frame(mean = pred_cruise$mean, obs_val = train_mat_ref[201:248,2]), aes(y=mean, x = obs_val)) + geom_point() +
geom_ribbon(aes(ymin=pred_cruise$mean - pred_cruise$sd, ymax=pred_cruise$mean + pred_cruise$sd), linetype=2, alpha=0.1) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,linetype="dotted") +
labs(x = "Observed cruise time (sec)", y = "Predicted cruise time (sec)")
ggplot(data=data.frame(mean = pred_land$mean, obs_val = train_mat_ref[201:248,3]), aes(y=mean, x = obs_val)) + geom_point() +
geom_ribbon(aes(ymin=pred_land$mean - pred_land$sd, ymax=pred_land$mean + pred_land$sd), linetype=2, alpha=0.1) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,linetype="dotted") +
labs(x = "Observed landing time (sec)", y = "Predicted landing time (sec)")
# plots
plot((pred_to$mean), train_mat_ref[201:248,1], xlab = "Predicted take-off time (sec)", ylab = "Observed take-off time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_cruise$mean), train_mat_ref[201:248,2], xlab = "Predicted cruise time (sec)", ylab = "Observed cruise time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_land$mean), train_mat_ref[201:248,3], xlab = "Predicted landing time (sec)", ylab = "Observed landing time (sec)")
abline(a=0,b=1, lty = 2)
gp_model_landing = km(
formula = ~.-1,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = F,
covtype = "matern5_2"
)
buffer_flight_time = sqrt(gp_model_cruise@covariance@sd2 + gp_model_take_off@covariance@sd2 + gp_model_landing@covariance@sd2)
X_test = train_mat_ref[201:248,-c(1:5)]
pred_land = predict(gp_model_landing, newdata = X_test[,c(1,3,6,8:9)], type = "UK")
pred_cruise = predict(gp_model_cruise, newdata = X_test, type = "UK")
pred_to = predict(gp_model_take_off, newdata = X_test, type = "UK")
# plots
plot((pred_to$mean), train_mat_ref[201:248,1], xlab = "Predicted take-off time (sec)", ylab = "Observed take-off time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_cruise$mean), train_mat_ref[201:248,2], xlab = "Predicted cruise time (sec)", ylab = "Observed cruise time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_land$mean), train_mat_ref[201:248,3], xlab = "Predicted landing time (sec)", ylab = "Observed landing time (sec)")
abline(a=0,b=1, lty = 2)
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = F,
covtype = "matern5_2"
)
buffer_flight_time = sqrt(gp_model_cruise@covariance@sd2 + gp_model_take_off@covariance@sd2 + gp_model_landing@covariance@sd2)
X_test = train_mat_ref[201:248,-c(1:5)]
pred_land = predict(gp_model_landing, newdata = X_test[,c(1,3,6,8:9)], type = "UK")
pred_cruise = predict(gp_model_cruise, newdata = X_test, type = "UK")
pred_to = predict(gp_model_take_off, newdata = X_test, type = "UK")
# plots
plot((pred_to$mean), train_mat_ref[201:248,1], xlab = "Predicted take-off time (sec)", ylab = "Observed take-off time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_cruise$mean), train_mat_ref[201:248,2], xlab = "Predicted cruise time (sec)", ylab = "Observed cruise time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_land$mean), train_mat_ref[201:248,3], xlab = "Predicted landing time (sec)", ylab = "Observed landing time (sec)")
abline(a=0,b=1, lty = 2)
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = log(Y_time[,3]),
nugget = 1e-3,
nugget.estim = F,
covtype = "matern5_2"
)
buffer_flight_time = sqrt(gp_model_cruise@covariance@sd2 + gp_model_take_off@covariance@sd2 + gp_model_landing@covariance@sd2)
X_test = train_mat_ref[201:248,-c(1:5)]
pred_land = predict(gp_model_landing, newdata = X_test[,c(1,3,6,8:9)], type = "UK")
pred_cruise = predict(gp_model_cruise, newdata = X_test, type = "UK")
pred_to = predict(gp_model_take_off, newdata = X_test, type = "UK")
# plots
plot((pred_to$mean), train_mat_ref[201:248,1], xlab = "Predicted take-off time (sec)", ylab = "Observed take-off time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_cruise$mean), train_mat_ref[201:248,2], xlab = "Predicted cruise time (sec)", ylab = "Observed cruise time (sec)")
abline(a=0,b=1, lty = 2)
plot(exp(pred_land$mean), train_mat_ref[201:248,3], xlab = "Predicted landing time (sec)", ylab = "Observed landing time (sec)")
abline(a=0,b=1, lty = 2)
hist(Y_time[,3])
hist(log(1+Y_time[,3]))
hist(log(1Y_time[,3]))
hist(log(Y_time[,3]))
outvals_land = boxplot(train_mat_ref$t_land)$out
train_mat = read.table('design_gp.txt', sep = ",",header = T)
out_index = which(train_mat$t_takeoff + train_mat$t_cruise + train_mat$t_land>499)
train_mat_ref = train_mat[-out_index,]
outvals_take_off = boxplot(train_mat_ref$t_takeoff)$out
outvals_cruise = boxplot(train_mat_ref$t_cruise)$out
outvals_land = boxplot(train_mat_ref$t_land)$out
outindex_take_off = which(train_mat_ref$t_takeoff %in% outvals_take_off)
outindex_cruise = which(train_mat_ref$t_cruise %in% outvals_cruise)
outindex_land = which(train_mat_ref$t_land %in% outvals_land)
outindex_comb = union(outindex_land, outindex_take_off)
train_mat_ref = train_mat_ref[-outindex_comb,]
outvals_take_off = boxplot(train_mat_ref$t_takeoff)$out
outvals_cruise = boxplot(train_mat_ref$t_cruise)$out
outvals_land = boxplot(train_mat_ref$t_land)$out
outindex_take_off = which(train_mat_ref$t_takeoff %in% outvals_take_off)
outindex_cruise = which(train_mat_ref$t_cruise %in% outvals_cruise)
outindex_land = which(train_mat_ref$t_land %in% outvals_land)
outindex_comb = union(outindex_land, outindex_take_off)
train_mat_ref = train_mat_ref[-outindex_comb,]
outvals_take_off = boxplot(train_mat_ref$t_takeoff)$out
outvals_cruise = boxplot(train_mat_ref$t_cruise)$out
outvals_land = boxplot(train_mat_ref$t_land)$out
outindex_take_off = which(train_mat_ref$t_takeoff %in% outvals_take_off)
outindex_cruise = which(train_mat_ref$t_cruise %in% outvals_cruise)
outindex_land = which(train_mat_ref$t_land %in% outvals_land)
outindex_comb = union(outindex_land, outindex_take_off)
train_mat_ref = train_mat_ref[-outindex_comb,]
train_mat_ref = train_mat[-out_index,]
train_mat = read.table('design_gp.txt', sep = ",",header = T)
out_index = which(train_mat$t_takeoff + train_mat$t_cruise + train_mat$t_land>499)
train_mat_ref = train_mat[-out_index,]
outvals_take_off = boxplot(train_mat_ref$t_takeoff)$out
outvals_cruise = boxplot(train_mat_ref$t_cruise)$out
outvals_land = boxplot(train_mat_ref$t_land)$out
outindex_take_off = which(train_mat_ref$t_takeoff %in% outvals_take_off)
outindex_cruise = which(train_mat_ref$t_cruise %in% outvals_cruise)
outindex_land = which(train_mat_ref$t_land %in% outvals_land)
outindex_comb = union(outindex_land, outindex_take_off)
train_mat_ref = train_mat_ref[-outindex_comb,]
outvals_take_off = boxplot(train_mat_ref$t_takeoff)$out
outvals_cruise = boxplot(train_mat_ref$t_cruise)$out
outvals_land = boxplot(train_mat_ref$t_land)$out
outindex_take_off = which(train_mat_ref$t_takeoff %in% outvals_take_off)
outindex_cruise = which(train_mat_ref$t_cruise %in% outvals_cruise)
outindex_land = which(train_mat_ref$t_land %in% outvals_land)
outindex_comb = union(outindex_land, outindex_take_off)
train_mat_ref = train_mat_ref[-outindex_comb,]
outvals_take_off = boxplot(train_mat_ref$t_takeoff)$out
outvals_cruise = boxplot(train_mat_ref$t_cruise)$out
outvals_land = boxplot(train_mat_ref$t_land)$out
outindex_take_off = which(train_mat_ref$t_takeoff %in% outvals_take_off)
outindex_cruise = which(train_mat_ref$t_cruise %in% outvals_cruise)
outindex_land = which(train_mat_ref$t_land %in% outvals_land)
outindex_comb = union(outindex_land, outindex_take_off)
train_mat_ref = train_mat_ref[-outindex_comb,]
outvals_take_off = boxplot(train_mat_ref$t_takeoff)$out
outvals_cruise = boxplot(train_mat_ref$t_cruise)$out
outvals_land = boxplot(train_mat_ref$t_land)$out
# data set
set.seed(123)  # For reproducibility
X_train = train_mat_ref[1:200,-c(1:5)]
Y_time = train_mat_ref[1:200,c(1:3)]
Y_batt = train_mat_ref[1:200,c(4:5)]
gp_model_take_off = km(
formula = ~dist+mass_pl+h_cruise+wind_v,
design = data.frame(X_train),
response = (Y_time[,1]),
nugget = 1e-3,
nugget.estim = T,
covtype = "matern5_2"
)
gp_model_take_off
gp_model_cruise = km(
formula = ~dist+I(wind_v*cospi(heading- wind_a))+I(wind_v*sinpi(heading- wind_a))+mass_pl,
design = data.frame(X_train),
response = (Y_time[,2]),
nugget = 1e-3,
nugget.estim = T,
covtype = "matern5_2"
)
gp_model_cruise
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = log(Y_time[,3]),
nugget = 1e-3,
nugget.estim = F,
covtype = "matern5_2"
)
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = log(Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
covtype = "matern5_2"
)
gp_model_landing
buffer_flight_time = sqrt(gp_model_cruise@covariance@sd2 + gp_model_take_off@covariance@sd2 + gp_model_landing@covariance@sd2)
X_test = train_mat_ref[201:242,-c(1:5)]
pred_land = predict(gp_model_landing, newdata = X_test[,c(1,3,6,8:9)], type = "UK")
pred_cruise = predict(gp_model_cruise, newdata = X_test, type = "UK")
pred_to = predict(gp_model_take_off, newdata = X_test, type = "UK")
# plots
plot((pred_to$mean), train_mat_ref[201:242,1], xlab = "Predicted take-off time (sec)", ylab = "Observed take-off time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_cruise$mean), train_mat_ref[201:242,2], xlab = "Predicted cruise time (sec)", ylab = "Observed cruise time (sec)")
abline(a=0,b=1, lty = 2)
plot(exp(pred_land$mean), train_mat_ref[201:242,3], xlab = "Predicted landing time (sec)", ylab = "Observed landing time (sec)")
abline(a=0,b=1, lty = 2)
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
covtype = "matern5_2"
)
buffer_flight_time = sqrt(gp_model_cruise@covariance@sd2 + gp_model_take_off@covariance@sd2 + gp_model_landing@covariance@sd2)
X_test = train_mat_ref[201:242,-c(1:5)]
pred_land = predict(gp_model_landing, newdata = X_test[,c(1,3,6,8:9)], type = "UK")
pred_cruise = predict(gp_model_cruise, newdata = X_test, type = "UK")
pred_to = predict(gp_model_take_off, newdata = X_test, type = "UK")
# plots
plot((pred_to$mean), train_mat_ref[201:242,1], xlab = "Predicted take-off time (sec)", ylab = "Observed take-off time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_cruise$mean), train_mat_ref[201:242,2], xlab = "Predicted cruise time (sec)", ylab = "Observed cruise time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_land$mean), train_mat_ref[201:242,3], xlab = "Predicted landing time (sec)", ylab = "Observed landing time (sec)")
abline(a=0,b=1, lty = 2)
?km
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
estim.method="LOO",
covtype = "matern5_2"
)
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
estim.method="LOO",
covtype = "matern5_2"
)
gp_model_landing
X_test = train_mat_ref[201:242,-c(1:5)]
buffer_flight_time = sqrt(gp_model_cruise@covariance@sd2 + gp_model_take_off@covariance@sd2 + gp_model_landing@covariance@sd2)
X_test = train_mat_ref[201:242,-c(1:5)]
pred_land = predict(gp_model_landing, newdata = X_test[,c(1,3,6,8:9)], type = "UK")
pred_cruise = predict(gp_model_cruise, newdata = X_test, type = "UK")
pred_to = predict(gp_model_take_off, newdata = X_test, type = "UK")
# plots
plot((pred_to$mean), train_mat_ref[201:242,1], xlab = "Predicted take-off time (sec)", ylab = "Observed take-off time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_cruise$mean), train_mat_ref[201:242,2], xlab = "Predicted cruise time (sec)", ylab = "Observed cruise time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_land$mean), train_mat_ref[201:242,3], xlab = "Predicted landing time (sec)", ylab = "Observed landing time (sec)")
abline(a=0,b=1, lty = 2)
ggplot(data=data.frame(mean = pred_to$mean, obs_val = train_mat_ref[201:242,1]), aes(y=mean, x = obs_val)) + geom_point() +
geom_ribbon(aes(ymin=pred_to$mean - pred_to$sd, ymax=pred_to$mean + pred_to$sd), linetype=2, alpha=0.1) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,linetype="dotted") +
labs(x = "Observed take-off time (sec)", y = "Predicted take-off time (sec)")
ggplot(data=data.frame(mean = pred_cruise$mean, obs_val = train_mat_ref[201:242,2]), aes(y=mean, x = obs_val)) + geom_point() +
geom_ribbon(aes(ymin=pred_cruise$mean - pred_cruise$sd, ymax=pred_cruise$mean + pred_cruise$sd), linetype=2, alpha=0.1) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,linetype="dotted") +
labs(x = "Observed cruise time (sec)", y = "Predicted cruise time (sec)")
ggplot(data=data.frame(mean = pred_land$mean, obs_val = train_mat_ref[201:242,3]), aes(y=mean, x = obs_val)) + geom_point() +
geom_ribbon(aes(ymin=pred_land$mean - pred_land$sd, ymax=pred_land$mean + pred_land$sd), linetype=2, alpha=0.1) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,linetype="dotted") +
labs(x = "Observed landing time (sec)", y = "Predicted landing time (sec)")
gp_model_landing = km(
formula = ~.1,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
estim.method="LOO",
covtype = "matern5_2"
)
gp_model_landing = km(
formula = ~1,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
estim.method="LOO",
covtype = "matern5_2"
)
gp_model_landing = km(
formula = ~1,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
estim.method="LOO",
covtype = "matern5_2",
optim.method = "genoud"
)
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
estim.method="MLE"
covtype = "matern5_2"
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
estim.method="MLE",
covtype = "matern5_2"
)
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-1,
nugget.estim = T,
estim.method="MLE",
covtype = "matern5_2"
)
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-1,
nugget.estim = T,
estim.method="MLE",
covtype = "gauss",
penalty = "SCAD"
)
gp_model_landing = km(
formula = ~.^2,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
estim.method="MLE",
covtype = "gauss",
penalty=list(fun="SCAD", value=3)
)
buffer_flight_time = sqrt(gp_model_cruise@covariance@sd2 + gp_model_take_off@covariance@sd2 + gp_model_landing@covariance@sd2)
X_test = train_mat_ref[201:242,-c(1:5)]
pred_land = predict(gp_model_landing, newdata = X_test[,c(1,3,6,8:9)], type = "UK")
pred_cruise = predict(gp_model_cruise, newdata = X_test, type = "UK")
pred_to = predict(gp_model_take_off, newdata = X_test, type = "UK")
# plots
plot((pred_to$mean), train_mat_ref[201:242,1], xlab = "Predicted take-off time (sec)", ylab = "Observed take-off time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_cruise$mean), train_mat_ref[201:242,2], xlab = "Predicted cruise time (sec)", ylab = "Observed cruise time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_land$mean), train_mat_ref[201:242,3], xlab = "Predicted landing time (sec)", ylab = "Observed landing time (sec)")
abline(a=0,b=1, lty = 2)
ggplot(data=data.frame(mean = pred_to$mean, obs_val = train_mat_ref[201:242,1]), aes(y=mean, x = obs_val)) + geom_point() +
geom_ribbon(aes(ymin=pred_to$mean - pred_to$sd, ymax=pred_to$mean + pred_to$sd), linetype=2, alpha=0.1) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,linetype="dotted") +
labs(x = "Observed take-off time (sec)", y = "Predicted take-off time (sec)")
ggplot(data=data.frame(mean = pred_cruise$mean, obs_val = train_mat_ref[201:242,2]), aes(y=mean, x = obs_val)) + geom_point() +
geom_ribbon(aes(ymin=pred_cruise$mean - pred_cruise$sd, ymax=pred_cruise$mean + pred_cruise$sd), linetype=2, alpha=0.1) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,linetype="dotted") +
labs(x = "Observed cruise time (sec)", y = "Predicted cruise time (sec)")
ggplot(data=data.frame(mean = pred_land$mean, obs_val = train_mat_ref[201:242,3]), aes(y=mean, x = obs_val)) + geom_point() +
geom_ribbon(aes(ymin=pred_land$mean - pred_land$sd, ymax=pred_land$mean + pred_land$sd), linetype=2, alpha=0.1) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,linetype="dotted") +
labs(x = "Observed landing time (sec)", y = "Predicted landing time (sec)")
gp_model_landing = km(
formula = ~.^1,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
estim.method="MLE",
covtype = "gauss",
penalty=list(fun="SCAD", value=3)
)
gp_model_landing = km(
formula = ~.,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
estim.method="MLE",
covtype = "gauss",
penalty=list(fun="SCAD", value=3)
)
gp_model_landing = km(
formula = ~1,
design = data.frame(X_train[,c(1,3,6,8:9)]),
response = (Y_time[,3]),
nugget = 1e-3,
nugget.estim = T,
estim.method="MLE",
covtype = "gauss",
penalty=list(fun="SCAD", value=3)
)
buffer_flight_time = sqrt(gp_model_cruise@covariance@sd2 + gp_model_take_off@covariance@sd2 + gp_model_landing@covariance@sd2)
X_test = train_mat_ref[201:242,-c(1:5)]
pred_land = predict(gp_model_landing, newdata = X_test[,c(1,3,6,8:9)], type = "UK")
pred_cruise = predict(gp_model_cruise, newdata = X_test, type = "UK")
pred_to = predict(gp_model_take_off, newdata = X_test, type = "UK")
# plots
plot((pred_to$mean), train_mat_ref[201:242,1], xlab = "Predicted take-off time (sec)", ylab = "Observed take-off time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_cruise$mean), train_mat_ref[201:242,2], xlab = "Predicted cruise time (sec)", ylab = "Observed cruise time (sec)")
abline(a=0,b=1, lty = 2)
plot((pred_land$mean), train_mat_ref[201:242,3], xlab = "Predicted landing time (sec)", ylab = "Observed landing time (sec)")
abline(a=0,b=1, lty = 2)
hist(Y_time[,3])
source("C:/Users/tatha/Downloads/CAELUS_SAS/CAELUS_SAS/SAS_flight_time.R")
data = data.frame("pred" = (pred_land$mean)+(pred_cruise$mean)+(pred_to$mean),
"obs" = rowSums(train_mat_ref[201:248,1:3]))
p<-ggplot(data=data, aes(x=obs, y=pred)) + geom_point() + geom_line()
p<-p+geom_ribbon(aes(ymin=data$pred - buffer_flight_time, ymax=data$pred + buffer_flight_time), linetype=2, alpha=0.1)
p
ggplot(data=data, aes(x=obs, y=pred)) + geom_point() +
geom_ribbon(aes(ymin=data$pred - buffer_flight_time, ymax=data$pred + buffer_flight_time), linetype=2, alpha=0.1)+
theme_minimal() +
labs(y = "Predicted total time (secs)",
x = "Observed total time (secs)") +
geom_abline(slope = 1, intercept = 0)
ggplot(data=data, aes(x=obs, y=pred)) + geom_point() +
geom_ribbon(aes(ymin=data$pred - 2*buffer_flight_time, ymax=data$pred + 2*buffer_flight_time), linetype=2, alpha=0.1)+
theme_minimal() +
labs(y = "Predicted total time (secs)",
x = "Observed total time (secs)") +
geom_abline(slope = 1, intercept = 0, line.type = "dashed")
ggplot(data=data, aes(x=obs, y=pred)) + geom_point() +
geom_ribbon(aes(ymin=data$pred - 2*buffer_flight_time, ymax=data$pred + 2*buffer_flight_time), linetype=2, alpha=0.1)+
theme_minimal() +
labs(y = "Predicted total time (secs)",
x = "Observed total time (secs)") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed")
?qqplot
qqplot(data$pred, data$obs)
abline(a =0, b -1)
abline(a =0, b =-1)
source("~/GitHub/Copula-estimation-using-loss-based-BART/codes/cond_copula_bayes.R")
setwd("~/GitHub/Copula-estimation-using-loss-based-BART/codes")
source("~/GitHub/Copula-estimation-using-loss-based-BART/codes/cond_copula_bayes.R")
source("~/GitHub/Copula-estimation-using-loss-based-BART/codes/cond_copula_bayes.R")
p_prior = ggplot(data_plot_prior) +
geom_line(aes(p, unif)) +
geom_line(aes(p, jeff), col = "red") +
geom_line(aes(p, two), col = "grey") +
geom_line(aes(p, half), col = "orange") +
geom_line(aes(p, IG11), col = "green") +
geom_line(aes(p, IG22), col = "darkgreen") +
geom_line(aes(p, LN1), col = "blue") +
geom_line(aes(p, LN0.8), col = "darkblue") +
xlab('X') +
ylab('estimated rho') +
theme_classic() +
theme(axis.text.x = element_text(angle = 30))
p_prior_zoom = p_prior +
# xlim(c(0.95, 0.99)) +
ylim(c(0, 20))
p_prior_zoom
